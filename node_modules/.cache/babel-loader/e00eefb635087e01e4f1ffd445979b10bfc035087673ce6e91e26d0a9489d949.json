{"ast":null,"code":"var _jsxFileName = \"/Users/jiyeong/WebstormProjects/test2/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import Select from 'react-select';\n//\n// const App = () => {\n//   const [selectedItem, setSelectedItem] = useState(null);\n//   const [selectedQuantity, setSelectedQuantity] = useState(null);\n//   const [quantityOptions, setQuantityOptions] = useState([]);\n//   const [isQuantityEnabled, setIsQuantityEnabled] = useState(false); // 갯수 옵션 활성화 여부\n//   const [selectedOptionDisplay, setSelectedOptionDisplay] = useState(''); // 선택한 옵션 표시\n//\n//   // 품목 옵션\n//   const itemOptions = [\n//     { value: 'chocolate', label: 'Chocolate' },\n//     { value: 'strawberry', label: 'Strawberry' },\n//     { value: 'vanilla', label: 'Vanilla' },\n//     { value: 'caramel', label: 'Caramel' }, // 추가된 옵션\n//   ];\n//\n//   // 갯수 옵션 업데이트 함수\n//   const updateQuantityOptions = (selectedItem) => {\n//     setSelectedItem(selectedItem);\n//     switch (selectedItem.value) {\n//       case 'chocolate':\n//         setQuantityOptions([\n//           { value: '1', label: '1 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '2', label: '2 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '3', label: '3 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '0', label: '품절', available: false, defaultValue: true },\n//         ]);\n//         setIsQuantityEnabled(true); // 갯수 옵션 활성화\n//         break;\n//       case 'strawberry':\n//         setQuantityOptions([\n//           { value: '10', label: '10 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '20', label: '20 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '30', label: '30 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '0', label: '품절', available: false, defaultValue: true },\n//         ]);\n//         setIsQuantityEnabled(true); // 갯수 옵션 활성화\n//         break;\n//       case 'vanilla':\n//         setQuantityOptions([\n//           { value: '5', label: '5 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '10', label: '10 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '15', label: '15 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '0', label: '품절', available: false, defaultValue: true },\n//         ]);\n//         setIsQuantityEnabled(true); // 갯수 옵션 활성화\n//         break;\n//       case 'caramel':\n//         setQuantityOptions([\n//           { value: '4', label: '4 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '8', label: '8 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '12', label: '12 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '0', label: '품절', available: false, defaultValue: true },\n//         ]);\n//         setIsQuantityEnabled(true); // 갯수 옵션 활성화\n//         break;\n//       default:\n//         setQuantityOptions([]);\n//         setIsQuantityEnabled(false); // 갯수 옵션 비활성화\n//         break;\n//     }\n//   };\n//\n//   // 갯수 옵션 선택 시 처리 함수\n//   const handleQuantityChange = (selectedOption) => {\n//     setSelectedQuantity(selectedOption);\n//     if (selectedItem) {\n//       setSelectedOptionDisplay(`${selectedItem.label} / ${selectedOption.label}`);\n//     }\n//   };\n//\n//   return (\n//     <div>\n//       <h2>품목 옵션 선택:</h2>\n//       <Select\n//         options={itemOptions}\n//         onChange={(selectedOption) => {\n//           setSelectedQuantity(null); // 품목이 변경되면 갯수 선택 초기화\n//           setSelectedOptionDisplay('');\n//           updateQuantityOptions(selectedOption);\n//         }}\n//         value={selectedItem}\n//         placeholder=\"품목\"\n//       />\n//\n//       <h2>갯수 옵션 선택:</h2>\n//       <Select\n//         options={quantityOptions.map(option => ({\n//           ...option,\n//           isDisabled: option.value === '0' || option.defaultValue // value가 0이거나 기본으로 설정된 옵션인 경우 disable\n//         }))}\n//         onChange={handleQuantityChange}\n//         value={selectedQuantity}\n//         isDisabled={!isQuantityEnabled}\n//       />\n//\n//       {selectedOptionDisplay && (\n//         <p>선택한 옵션: {selectedOptionDisplay}</p>\n//       )}\n//     </div>\n//   );\n// };\n//\n// export default App;\n//\nimport React, { useState } from 'react';\nimport Select from 'react-select';\nimport groupListData from './optionData'; // 정적 데이터 파일 import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedAnimal, setSelectedAnimal] = useState(null);\n  const [selectedFood, setSelectedFood] = useState(null);\n  const [isFoodEnabled, setIsFoodEnabled] = useState(false); // 음식 옵션 활성화 여부\n  const [selectedOptionDisplay, setSelectedOptionDisplay] = useState(''); // 선택한 옵션 표시\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData;\n\n  // 동물 종류 옵션\n  const animalOptions = groupList.find(group => group.title === '동물 종류 선택').options;\n\n  // 음식 옵션 업데이트 함수\n  const updateFoodOptions = selectedAnimal => {\n    setSelectedAnimal(selectedAnimal);\n    const foodOptions = groupList.find(group => group.title === '음식 선택').options;\n    setIsFoodEnabled(true); // 음식 옵션 활성화\n    setSelectedFood(null); // 음식 선택 초기화\n    setSelectedOptionDisplay(''); // 선택한 옵션 표시 초기화\n    return foodOptions.filter(option => option.value.startsWith(selectedAnimal.value));\n  };\n\n  // 음식 옵션 선택 시 처리 함수\n  const handleFoodChange = selectedOption => {\n    setSelectedFood(selectedOption);\n    setSelectedOptionDisplay(`${selectedAnimal.label} / ${selectedOption.label}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [groupList.map((group, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: group.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        options: group.options,\n        onChange: selectedOption => {\n          if (group.title === '동물 종류 선택') {\n            setSelectedFood(null); // 동물 종류가 변경되면 음식 선택 초기화\n            setSelectedOptionDisplay('');\n            const foodOptions = updateFoodOptions(selectedOption);\n            // setFoodOptions(foodOptions); // 이 부분은 필요없는 부분이므로 주석 처리\n          }\n          if (group.title === '음식 선택') {\n            handleFoodChange(selectedOption);\n          }\n        },\n        value: group.title === '동물 종류 선택' ? selectedAnimal : selectedFood,\n        isDisabled: false // 항상 활성화 상태로 변경\n        ,\n        placeholder: group.placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this)), selectedOptionDisplay && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uC120\\uD0DD\\uD55C \\uC635\\uC158: \", selectedOptionDisplay]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"aCMhUBEmjQE+uT2ICROyAGlceKw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Select","groupListData","jsxDEV","_jsxDEV","App","_s","selectedAnimal","setSelectedAnimal","selectedFood","setSelectedFood","isFoodEnabled","setIsFoodEnabled","selectedOptionDisplay","setSelectedOptionDisplay","groupList","animalOptions","find","group","title","options","updateFoodOptions","foodOptions","filter","option","value","startsWith","handleFoodChange","selectedOption","label","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","onChange","isDisabled","placeholder","_c","$RefreshReg$"],"sources":["/Users/jiyeong/WebstormProjects/test2/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import Select from 'react-select';\n//\n// const App = () => {\n//   const [selectedItem, setSelectedItem] = useState(null);\n//   const [selectedQuantity, setSelectedQuantity] = useState(null);\n//   const [quantityOptions, setQuantityOptions] = useState([]);\n//   const [isQuantityEnabled, setIsQuantityEnabled] = useState(false); // 갯수 옵션 활성화 여부\n//   const [selectedOptionDisplay, setSelectedOptionDisplay] = useState(''); // 선택한 옵션 표시\n//\n//   // 품목 옵션\n//   const itemOptions = [\n//     { value: 'chocolate', label: 'Chocolate' },\n//     { value: 'strawberry', label: 'Strawberry' },\n//     { value: 'vanilla', label: 'Vanilla' },\n//     { value: 'caramel', label: 'Caramel' }, // 추가된 옵션\n//   ];\n//\n//   // 갯수 옵션 업데이트 함수\n//   const updateQuantityOptions = (selectedItem) => {\n//     setSelectedItem(selectedItem);\n//     switch (selectedItem.value) {\n//       case 'chocolate':\n//         setQuantityOptions([\n//           { value: '1', label: '1 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '2', label: '2 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '3', label: '3 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '0', label: '품절', available: false, defaultValue: true },\n//         ]);\n//         setIsQuantityEnabled(true); // 갯수 옵션 활성화\n//         break;\n//       case 'strawberry':\n//         setQuantityOptions([\n//           { value: '10', label: '10 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '20', label: '20 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '30', label: '30 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '0', label: '품절', available: false, defaultValue: true },\n//         ]);\n//         setIsQuantityEnabled(true); // 갯수 옵션 활성화\n//         break;\n//       case 'vanilla':\n//         setQuantityOptions([\n//           { value: '5', label: '5 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '10', label: '10 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '15', label: '15 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '0', label: '품절', available: false, defaultValue: true },\n//         ]);\n//         setIsQuantityEnabled(true); // 갯수 옵션 활성화\n//         break;\n//       case 'caramel':\n//         setQuantityOptions([\n//           { value: '4', label: '4 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '8', label: '8 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '12', label: '12 개 - 재고 있음', available: true, defaultValue: false },\n//           { value: '0', label: '품절', available: false, defaultValue: true },\n//         ]);\n//         setIsQuantityEnabled(true); // 갯수 옵션 활성화\n//         break;\n//       default:\n//         setQuantityOptions([]);\n//         setIsQuantityEnabled(false); // 갯수 옵션 비활성화\n//         break;\n//     }\n//   };\n//\n//   // 갯수 옵션 선택 시 처리 함수\n//   const handleQuantityChange = (selectedOption) => {\n//     setSelectedQuantity(selectedOption);\n//     if (selectedItem) {\n//       setSelectedOptionDisplay(`${selectedItem.label} / ${selectedOption.label}`);\n//     }\n//   };\n//\n//   return (\n//     <div>\n//       <h2>품목 옵션 선택:</h2>\n//       <Select\n//         options={itemOptions}\n//         onChange={(selectedOption) => {\n//           setSelectedQuantity(null); // 품목이 변경되면 갯수 선택 초기화\n//           setSelectedOptionDisplay('');\n//           updateQuantityOptions(selectedOption);\n//         }}\n//         value={selectedItem}\n//         placeholder=\"품목\"\n//       />\n//\n//       <h2>갯수 옵션 선택:</h2>\n//       <Select\n//         options={quantityOptions.map(option => ({\n//           ...option,\n//           isDisabled: option.value === '0' || option.defaultValue // value가 0이거나 기본으로 설정된 옵션인 경우 disable\n//         }))}\n//         onChange={handleQuantityChange}\n//         value={selectedQuantity}\n//         isDisabled={!isQuantityEnabled}\n//       />\n//\n//       {selectedOptionDisplay && (\n//         <p>선택한 옵션: {selectedOptionDisplay}</p>\n//       )}\n//     </div>\n//   );\n// };\n//\n// export default App;\n//\nimport React, { useState } from 'react';\nimport Select from 'react-select';\nimport groupListData from './optionData'; // 정적 데이터 파일 import\n\nconst App = () => {\n  const [selectedAnimal, setSelectedAnimal] = useState(null);\n  const [selectedFood, setSelectedFood] = useState(null);\n  const [isFoodEnabled, setIsFoodEnabled] = useState(false); // 음식 옵션 활성화 여부\n  const [selectedOptionDisplay, setSelectedOptionDisplay] = useState(''); // 선택한 옵션 표시\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData;\n\n  // 동물 종류 옵션\n  const animalOptions = groupList.find(group => group.title === '동물 종류 선택').options;\n\n  // 음식 옵션 업데이트 함수\n  const updateFoodOptions = (selectedAnimal) => {\n    setSelectedAnimal(selectedAnimal);\n    const foodOptions = groupList.find(group => group.title === '음식 선택').options;\n    setIsFoodEnabled(true); // 음식 옵션 활성화\n    setSelectedFood(null); // 음식 선택 초기화\n    setSelectedOptionDisplay(''); // 선택한 옵션 표시 초기화\n    return foodOptions.filter(option => option.value.startsWith(selectedAnimal.value));\n  };\n\n  // 음식 옵션 선택 시 처리 함수\n  const handleFoodChange = (selectedOption) => {\n    setSelectedFood(selectedOption);\n    setSelectedOptionDisplay(`${selectedAnimal.label} / ${selectedOption.label}`);\n  };\n\n  return (\n    <div>\n      {groupList.map((group, index) => (\n        <div key={index}>\n          <h2>{group.title}</h2>\n          <Select\n            options={group.options}\n            onChange={(selectedOption) => {\n              if (group.title === '동물 종류 선택') {\n                setSelectedFood(null); // 동물 종류가 변경되면 음식 선택 초기화\n                setSelectedOptionDisplay('');\n                const foodOptions = updateFoodOptions(selectedOption);\n                // setFoodOptions(foodOptions); // 이 부분은 필요없는 부분이므로 주석 처리\n              }\n              if (group.title === '음식 선택') {\n                handleFoodChange(selectedOption)\n              }\n            }}\n            value={group.title === '동물 종류 선택' ? selectedAnimal : selectedFood}\n            isDisabled={false} // 항상 활성화 상태로 변경\n            placeholder={group.placeholder}\n          />\n        </div>\n      ))}\n      {selectedOptionDisplay && (\n        <p>선택한 옵션: {selectedOptionDisplay}</p>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
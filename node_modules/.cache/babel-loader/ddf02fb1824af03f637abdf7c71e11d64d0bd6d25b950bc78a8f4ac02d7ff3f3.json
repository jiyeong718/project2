{"ast":null,"code":"var _jsxFileName = \"/Users/jiyeong/WebstormProjects/test2/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import Select from 'react-select';\n// import groupListData from './optionData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState({});\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = { ...selectedOptions, [groupIndex]: selectedOption };\n//     setSelectedOptions(updatedOptions);\n//   };\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={group.options}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={group.placeholder}\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {Object.keys(selectedOptions).map((key, index) => (\n//         <p key={index}>\n//           {groupList[key].title}: {selectedOptions[key].label}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\nimport React, { useState } from 'react';\nimport Select from 'react-select';\nimport groupListData from './optionData'; // 정적 데이터 파일 import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedOptions, setSelectedOptions] = useState({});\n  const [isGroupEnabled, setIsGroupEnabled] = useState(false);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData;\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (selectedOption, groupIndex) => {\n    const updatedOptions = {\n      ...selectedOptions,\n      [groupIndex]: selectedOption\n    };\n    setSelectedOptions(updatedOptions);\n\n    // 현재 선택된 그룹 인덱스와 이전 그룹 인덱스를 비교하여 disable 상태 업데이트\n    if (groupIndex < groupList.length - 1) {\n      setIsGroupEnabled(true); // 현재 그룹 다음의 그룹을 enable\n    } else {\n      setIsGroupEnabled(false); // 마지막 그룹 선택 시 disable\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [groupList.map((group, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: group.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        options: group.options,\n        onChange: selectedOption => handleGroupChange(selectedOption, index),\n        value: selectedOptions[index],\n        placeholder: group.placeholder,\n        isDisabled: !isGroupEnabled || index > 0 && !selectedOptions[index - 1] // 이전 그룹이 선택되지 않은 경우 disable\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC120\\uD0DD\\uD55C \\uC635\\uC158:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), Object.keys(selectedOptions).map((key, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [groupList[key].title, \": \", selectedOptions[key].label]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"hU3QrMHaJRvYZQx9l3K/zpLY3+0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Select","groupListData","jsxDEV","_jsxDEV","App","_s","selectedOptions","setSelectedOptions","isGroupEnabled","setIsGroupEnabled","groupList","handleGroupChange","selectedOption","groupIndex","updatedOptions","length","children","map","group","index","title","fileName","_jsxFileName","lineNumber","columnNumber","options","onChange","value","placeholder","isDisabled","Object","keys","key","label","_c","$RefreshReg$"],"sources":["/Users/jiyeong/WebstormProjects/test2/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import Select from 'react-select';\n// import groupListData from './optionData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState({});\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = { ...selectedOptions, [groupIndex]: selectedOption };\n//     setSelectedOptions(updatedOptions);\n//   };\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={group.options}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={group.placeholder}\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {Object.keys(selectedOptions).map((key, index) => (\n//         <p key={index}>\n//           {groupList[key].title}: {selectedOptions[key].label}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\nimport React, { useState } from 'react';\nimport Select from 'react-select';\nimport groupListData from './optionData'; // 정적 데이터 파일 import\n\nconst App = () => {\n  const [selectedOptions, setSelectedOptions] = useState({});\n  const [isGroupEnabled, setIsGroupEnabled] = useState(false);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData;\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (selectedOption, groupIndex) => {\n    const updatedOptions = { ...selectedOptions, [groupIndex]: selectedOption };\n    setSelectedOptions(updatedOptions);\n\n    // 현재 선택된 그룹 인덱스와 이전 그룹 인덱스를 비교하여 disable 상태 업데이트\n    if (groupIndex < groupList.length - 1) {\n      setIsGroupEnabled(true); // 현재 그룹 다음의 그룹을 enable\n    } else {\n      setIsGroupEnabled(false); // 마지막 그룹 선택 시 disable\n    }\n  };\n\n  return (\n    <div>\n      {groupList.map((group, index) => (\n        <div key={index}>\n          <h2>{group.title}</h2>\n          <Select\n            options={group.options}\n            onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n            value={selectedOptions[index]}\n            placeholder={group.placeholder}\n            isDisabled={!isGroupEnabled || index > 0 && !selectedOptions[index - 1]} // 이전 그룹이 선택되지 않은 경우 disable\n          />\n        </div>\n      ))}\n      <h2>선택한 옵션:</h2>\n      {Object.keys(selectedOptions).map((key, index) => (\n        <p key={index}>\n          {groupList[key].title}: {selectedOptions[key].label}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/jiyeong/WebstormProjects/test2/src/App.js\",\n  _s = $RefreshSig$();\n// 첫번째 셀렉터에도 적용이 안됨.\n// import React, { useState, useEffect } from 'react';\n// import Select from 'react-select';\n// import groupListData from './groupListData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState([]);\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//   const countList = groupListData.countList;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = [...selectedOptions];\n//     updatedOptions[groupIndex] = selectedOption;\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 그룹 다음의 그룹을 enable\n//     if (groupIndex < groupList.length - 1) {\n//       const updatedIsGroupEnabled = [...isGroupEnabled];\n//       updatedIsGroupEnabled[groupIndex + 1] = true;\n//       setIsGroupEnabled(updatedIsGroupEnabled);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 그룹 enable\n//   useEffect(() => {\n//     setIsGroupEnabled(updatedIsGroupEnabled => {\n//       const updated = [...updatedIsGroupEnabled];\n//       updated[0] = true;\n//       return updated;\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updatedOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         return group.options.map(option => ({\n//           value: option,\n//           label: option,\n//           isDisabled: false\n//         }));\n//       } else {\n//         const previousSelectedOption = selectedOptions[index - 1];\n//         if (previousSelectedOption) {\n//           // 중복된 조합을 필터링하여 하나의 옵션으로만 표시\n//           const currentGroupOptions = [];\n//           const seen = new Set();\n//           countList.forEach(item => {\n//             if (item.combination[index] && item.combination[index - 1] === previousSelectedOption.value && !seen.has(item.combination[index])) {\n//               const label = item.remainCount === 0 ? `${item.combination[index]} (품절)` : `${item.combination[index]} (${item.remainCount} 개 남음)`;\n//               currentGroupOptions.push({\n//                 value: item.combination[index],\n//                 label: label,\n//                 isDisabled: item.remainCount === 0\n//               });\n//               seen.add(item.combination[index]);\n//             }\n//           });\n//           return currentGroupOptions;\n//         } else {\n//           return [];\n//         }\n//       }\n//     });\n//\n//     // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n//     updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options.map(option => ({\n//       value: option,\n//       label: option,\n//       isDisabled: false\n//     }));\n//\n//     setOptionList(updatedOptionList);\n//   }, [countList, groupList, selectedOptions]);\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={optionList[index]}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={group.title}\n//             isDisabled={index === 0 ? false : !isGroupEnabled[index]}\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {selectedOptions.map((selectedOption, index) => (\n//         <p key={index}>\n//           {groupList[index].title}: {selectedOption ? selectedOption.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n//순수리엑트로만 셀렉트 박스 만들기\n// // 2번 코드\n// import React, { useState, useEffect } from 'react';\n// import groupListData from './groupListData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState([]);\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList || []; // 기본값으로 빈 배열 설정\n//   const countList = groupListData.countList || []; // 기본값으로 빈 배열 설정\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (event, groupIndex) => {\n//     const selectedOption = event.target.value;\n//     const updatedOptions = [...selectedOptions];\n//     updatedOptions[groupIndex] = selectedOption;\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 그룹 다음의 그룹을 enable\n//     if (groupIndex < groupList.length - 1) {\n//       const updatedIsGroupEnabled = [...isGroupEnabled];\n//       updatedIsGroupEnabled[groupIndex + 1] = true;\n//       setIsGroupEnabled(updatedIsGroupEnabled);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 그룹만 enable\n//   useEffect(() => {\n//     setIsGroupEnabled(updatedIsGroupEnabled => {\n//       const updated = [...updatedIsGroupEnabled];\n//       updated[0] = true;\n//       return updated;\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updatedOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         return [group.title, ...group.options];\n//       } else {\n//         const previousSelectedOption = selectedOptions[index - 1];\n//         if (previousSelectedOption) {\n//           // 중복된 조합을 필터링하여 하나의 옵션으로만 표시\n//           const currentGroupOptions = [];\n//           const seen = new Set();\n//           countList.forEach(item => {\n//             if (item.combination[index] && item.combination[index - 1] === previousSelectedOption && !seen.has(item.combination[index])) {\n//               const label = item.remainCount === 0 ? `${item.combination[index]} (품절)` : `${item.combination[index]} (${item.remainCount} 개 남음)`;\n//               currentGroupOptions.push(label);\n//               seen.add(item.combination[index]);\n//             }\n//           });\n//           return currentGroupOptions;\n//         } else {\n//           return [];\n//         }\n//       }\n//     });\n//\n//     // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n//     updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1]?.options || [];\n//\n//     setOptionList(updatedOptionList);\n//   }, [countList, groupList, selectedOptions]);\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <select\n//             value={selectedOptions[index] || ''}\n//             onChange={(event) => handleGroupChange(event, index)}\n//             disabled={index === 0 ? false : !isGroupEnabled[index]}\n//           >\n//             <option value=\"\" disabled={true}>{group.title}</option>\n//             {optionList[index]?.map((option, idx) => (\n//               <option key={idx} value={option} disabled={false}>{option}</option>\n//             ))}\n//           </select>\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {selectedOptions.map((selectedOption, index) => (\n//         <p key={index}>\n//           {groupList[index]?.title}: {selectedOption ? selectedOption : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport groupListData from './groupListData'; // 정적 데이터 파일 import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n  const [optionList, setOptionList] = useState([]);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData.groupList || []; // 기본값으로 빈 배열 설정\n  const countList = groupListData.countList || []; // 기본값으로 빈 배열 설정\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (event, groupIndex) => {\n    const selectedOption = event.target.value;\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[groupIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // 현재 그룹 다음의 그룹을 enable\n    if (groupIndex < groupList.length - 1) {\n      const updatedIsGroupEnabled = [...isGroupEnabled];\n      updatedIsGroupEnabled[groupIndex + 1] = true;\n      setIsGroupEnabled(updatedIsGroupEnabled);\n    }\n  };\n\n  // 초기화 시 첫 번째 그룹만 enable\n  useEffect(() => {\n    setIsGroupEnabled(updatedIsGroupEnabled => {\n      const updated = [...updatedIsGroupEnabled];\n      updated[0] = true;\n      return updated;\n    });\n  }, []);\n\n  // 각 셀렉터의 옵션 설정\n  useEffect(() => {\n    var _groupList;\n    const updatedOptionList = groupList.map((group, index) => {\n      if (index === 0) {\n        // 첫 번째 그룹의 옵션에서 그룹 타이틀을 제거\n        return group.options;\n      } else {\n        const previousSelectedOption = selectedOptions[index - 1];\n        if (previousSelectedOption) {\n          // 중복된 조합을 필터링하여 하나의 옵션으로만 표시\n          const currentGroupOptions = [];\n          const seen = new Set();\n          countList.forEach(item => {\n            if (item.combination[index] && item.combination[index - 1] === previousSelectedOption) {\n              const label = item.remainCount === 0 ? `${item.combination[index]} (품절)` : `${item.combination[index]} (${item.remainCount} 개 남음)`;\n              currentGroupOptions.push(label);\n              seen.add(item.combination[index]);\n            }\n          });\n          return currentGroupOptions;\n        } else {\n          return [];\n        }\n      }\n    });\n\n    // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n    updatedOptionList[groupList.length - 1] = ((_groupList = groupList[groupList.length - 1]) === null || _groupList === void 0 ? void 0 : _groupList.options) || [];\n    setOptionList(updatedOptionList);\n  }, [countList, groupList, selectedOptions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [groupList.map((group, index) => {\n      var _optionList$index;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: group.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedOptions[index] || '',\n          onChange: event => handleGroupChange(event, index),\n          disabled: index === 0 ? false : !isGroupEnabled[index],\n          children: [index === 0 ? /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: \"\\uC120\\uD0DD\\uD558\\uC138\\uC694\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: group.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 15\n          }, this), (_optionList$index = optionList[index]) === null || _optionList$index === void 0 ? void 0 : _optionList$index.map((option, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: option,\n            disabled: false,\n            children: option\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC120\\uD0DD\\uD55C \\uC635\\uC158:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), selectedOptions.map((selectedOption, index) => {\n      var _groupList$index;\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [(_groupList$index = groupList[index]) === null || _groupList$index === void 0 ? void 0 : _groupList$index.title, \": \", selectedOption ? selectedOption : '-']\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"6SsHdK235oCi7Fun2tf7xZj3Dr0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","groupListData","jsxDEV","_jsxDEV","App","_s","selectedOptions","setSelectedOptions","isGroupEnabled","setIsGroupEnabled","Array","groupList","length","fill","optionList","setOptionList","countList","handleGroupChange","event","groupIndex","selectedOption","target","value","updatedOptions","updatedIsGroupEnabled","updated","_groupList","updatedOptionList","map","group","index","options","previousSelectedOption","currentGroupOptions","seen","Set","forEach","item","combination","label","remainCount","push","add","children","_optionList$index","title","fileName","_jsxFileName","lineNumber","columnNumber","onChange","disabled","option","idx","_groupList$index","_c","$RefreshReg$"],"sources":["/Users/jiyeong/WebstormProjects/test2/src/App.js"],"sourcesContent":["// 첫번째 셀렉터에도 적용이 안됨.\n// import React, { useState, useEffect } from 'react';\n// import Select from 'react-select';\n// import groupListData from './groupListData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState([]);\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//   const countList = groupListData.countList;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = [...selectedOptions];\n//     updatedOptions[groupIndex] = selectedOption;\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 그룹 다음의 그룹을 enable\n//     if (groupIndex < groupList.length - 1) {\n//       const updatedIsGroupEnabled = [...isGroupEnabled];\n//       updatedIsGroupEnabled[groupIndex + 1] = true;\n//       setIsGroupEnabled(updatedIsGroupEnabled);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 그룹 enable\n//   useEffect(() => {\n//     setIsGroupEnabled(updatedIsGroupEnabled => {\n//       const updated = [...updatedIsGroupEnabled];\n//       updated[0] = true;\n//       return updated;\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updatedOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         return group.options.map(option => ({\n//           value: option,\n//           label: option,\n//           isDisabled: false\n//         }));\n//       } else {\n//         const previousSelectedOption = selectedOptions[index - 1];\n//         if (previousSelectedOption) {\n//           // 중복된 조합을 필터링하여 하나의 옵션으로만 표시\n//           const currentGroupOptions = [];\n//           const seen = new Set();\n//           countList.forEach(item => {\n//             if (item.combination[index] && item.combination[index - 1] === previousSelectedOption.value && !seen.has(item.combination[index])) {\n//               const label = item.remainCount === 0 ? `${item.combination[index]} (품절)` : `${item.combination[index]} (${item.remainCount} 개 남음)`;\n//               currentGroupOptions.push({\n//                 value: item.combination[index],\n//                 label: label,\n//                 isDisabled: item.remainCount === 0\n//               });\n//               seen.add(item.combination[index]);\n//             }\n//           });\n//           return currentGroupOptions;\n//         } else {\n//           return [];\n//         }\n//       }\n//     });\n//\n//     // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n//     updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options.map(option => ({\n//       value: option,\n//       label: option,\n//       isDisabled: false\n//     }));\n//\n//     setOptionList(updatedOptionList);\n//   }, [countList, groupList, selectedOptions]);\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={optionList[index]}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={group.title}\n//             isDisabled={index === 0 ? false : !isGroupEnabled[index]}\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {selectedOptions.map((selectedOption, index) => (\n//         <p key={index}>\n//           {groupList[index].title}: {selectedOption ? selectedOption.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n//순수리엑트로만 셀렉트 박스 만들기\n// // 2번 코드\n// import React, { useState, useEffect } from 'react';\n// import groupListData from './groupListData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState([]);\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList || []; // 기본값으로 빈 배열 설정\n//   const countList = groupListData.countList || []; // 기본값으로 빈 배열 설정\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (event, groupIndex) => {\n//     const selectedOption = event.target.value;\n//     const updatedOptions = [...selectedOptions];\n//     updatedOptions[groupIndex] = selectedOption;\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 그룹 다음의 그룹을 enable\n//     if (groupIndex < groupList.length - 1) {\n//       const updatedIsGroupEnabled = [...isGroupEnabled];\n//       updatedIsGroupEnabled[groupIndex + 1] = true;\n//       setIsGroupEnabled(updatedIsGroupEnabled);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 그룹만 enable\n//   useEffect(() => {\n//     setIsGroupEnabled(updatedIsGroupEnabled => {\n//       const updated = [...updatedIsGroupEnabled];\n//       updated[0] = true;\n//       return updated;\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updatedOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         return [group.title, ...group.options];\n//       } else {\n//         const previousSelectedOption = selectedOptions[index - 1];\n//         if (previousSelectedOption) {\n//           // 중복된 조합을 필터링하여 하나의 옵션으로만 표시\n//           const currentGroupOptions = [];\n//           const seen = new Set();\n//           countList.forEach(item => {\n//             if (item.combination[index] && item.combination[index - 1] === previousSelectedOption && !seen.has(item.combination[index])) {\n//               const label = item.remainCount === 0 ? `${item.combination[index]} (품절)` : `${item.combination[index]} (${item.remainCount} 개 남음)`;\n//               currentGroupOptions.push(label);\n//               seen.add(item.combination[index]);\n//             }\n//           });\n//           return currentGroupOptions;\n//         } else {\n//           return [];\n//         }\n//       }\n//     });\n//\n//     // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n//     updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1]?.options || [];\n//\n//     setOptionList(updatedOptionList);\n//   }, [countList, groupList, selectedOptions]);\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <select\n//             value={selectedOptions[index] || ''}\n//             onChange={(event) => handleGroupChange(event, index)}\n//             disabled={index === 0 ? false : !isGroupEnabled[index]}\n//           >\n//             <option value=\"\" disabled={true}>{group.title}</option>\n//             {optionList[index]?.map((option, idx) => (\n//               <option key={idx} value={option} disabled={false}>{option}</option>\n//             ))}\n//           </select>\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {selectedOptions.map((selectedOption, index) => (\n//         <p key={index}>\n//           {groupList[index]?.title}: {selectedOption ? selectedOption : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport groupListData from './groupListData'; // 정적 데이터 파일 import\n\nconst App = () => {\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n  const [optionList, setOptionList] = useState([]);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData.groupList || []; // 기본값으로 빈 배열 설정\n  const countList = groupListData.countList || []; // 기본값으로 빈 배열 설정\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (event, groupIndex) => {\n    const selectedOption = event.target.value;\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[groupIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // 현재 그룹 다음의 그룹을 enable\n    if (groupIndex < groupList.length - 1) {\n      const updatedIsGroupEnabled = [...isGroupEnabled];\n      updatedIsGroupEnabled[groupIndex + 1] = true;\n      setIsGroupEnabled(updatedIsGroupEnabled);\n    }\n  };\n\n  // 초기화 시 첫 번째 그룹만 enable\n  useEffect(() => {\n    setIsGroupEnabled(updatedIsGroupEnabled => {\n      const updated = [...updatedIsGroupEnabled];\n      updated[0] = true;\n      return updated;\n    });\n  }, []);\n\n  // 각 셀렉터의 옵션 설정\n  useEffect(() => {\n    const updatedOptionList = groupList.map((group, index) => {\n      if (index === 0) {\n        // 첫 번째 그룹의 옵션에서 그룹 타이틀을 제거\n        return group.options;\n      } else {\n        const previousSelectedOption = selectedOptions[index - 1];\n        if (previousSelectedOption) {\n          // 중복된 조합을 필터링하여 하나의 옵션으로만 표시\n          const currentGroupOptions = [];\n          const seen = new Set();\n          countList.forEach(item => {\n            if (item.combination[index] && item.combination[index - 1] === previousSelectedOption) {\n              const label = item.remainCount === 0 ? `${item.combination[index]} (품절)` : `${item.combination[index]} (${item.remainCount} 개 남음)`;\n              currentGroupOptions.push(label);\n              seen.add(item.combination[index]);\n            }\n          });\n          return currentGroupOptions;\n        } else {\n          return [];\n        }\n      }\n    });\n\n    // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n    updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1]?.options || [];\n\n    setOptionList(updatedOptionList);\n  }, [countList, groupList, selectedOptions]);\n\n  return (\n    <div>\n      {groupList.map((group, index) => (\n        <div key={index}>\n          <h2>{group.title}</h2>\n          <select\n            value={selectedOptions[index] || ''}\n            onChange={(event) => handleGroupChange(event, index)}\n            disabled={index === 0 ? false : !isGroupEnabled[index]}\n          >\n            {/* 첫 번째 셀렉터에서 그룹 타이틀 옵션을 제거 */}\n            {index === 0 ? (\n              <option value=\"\" disabled={true}>선택하세요</option>\n            ) : (\n              <option value=\"\" disabled={true}>{group.title}</option>\n            )}\n            {optionList[index]?.map((option, idx) => (\n              <option key={idx} value={option} disabled={false}>{option}</option>\n            ))}\n          </select>\n        </div>\n      ))}\n      <h2>선택한 옵션:</h2>\n      {selectedOptions.map((selectedOption, index) => (\n        <p key={index}>\n          {groupList[index]?.title}: {selectedOption ? selectedOption : '-'}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,eAAe,EAAEC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
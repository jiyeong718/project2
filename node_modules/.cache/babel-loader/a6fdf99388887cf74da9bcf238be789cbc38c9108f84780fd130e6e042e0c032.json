{"ast":null,"code":"var _jsxFileName = \"/Users/jiyeong/WebstormProjects/test2/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport groupListData from './groupListData'; // 정적 데이터 파일 import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n  const [optionList, setOptionList] = useState([]);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData.groupList;\n  const countList = groupListData.countList;\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (event, groupIndex) => {\n    const selectedOption = optionList[groupIndex].find(option => option.value === event.target.value);\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[groupIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // 현재 그룹 다음의 그룹을 enable\n    if (groupIndex < groupList.length - 1) {\n      const updatedIsGroupEnabled = [...isGroupEnabled];\n      updatedIsGroupEnabled[groupIndex + 1] = true;\n      setIsGroupEnabled(updatedIsGroupEnabled);\n    }\n  };\n\n  // 초기화 시 첫 번째 그룹 enable\n  useEffect(() => {\n    setIsGroupEnabled(updatedIsGroupEnabled => {\n      const updated = [...updatedIsGroupEnabled];\n      updated[0] = true;\n      return updated;\n    });\n  }, []);\n\n  // 각 셀렉터의 옵션 설정\n  useEffect(() => {\n    const updatedOptionList = groupList.map((group, index) => {\n      if (index === 0) {\n        // 첫 번째 셀렉터의 옵션 설정\n        return group.options.map(option => {\n          var _countList$find;\n          const remainCount = ((_countList$find = countList.find(item => item.combination[0] === option)) === null || _countList$find === void 0 ? void 0 : _countList$find.remainCount) || 0;\n          const label = remainCount === 0 ? `${option} (품절)` : option;\n          return {\n            value: option,\n            label: label,\n            isDisabled: remainCount === 0\n          };\n        });\n      } else {\n        const previousSelectedOption = selectedOptions[index - 1];\n        if (previousSelectedOption) {\n          // 중복된 조합을 필터링하여 하나의 옵션으로만 표시\n          const currentGroupOptions = [];\n          const seen = new Set();\n          countList.forEach(item => {\n            if (item.combination[index] && item.combination[index - 1] === previousSelectedOption.value && !seen.has(item.combination[index])) {\n              const label = item.remainCount === 0 ? `${item.combination[index]} (품절)` : `${item.combination[index]} (${item.remainCount} 개 남음)`;\n              currentGroupOptions.push({\n                value: item.combination[index],\n                label: label,\n                isDisabled: item.remainCount === 0\n              });\n              seen.add(item.combination[index]);\n            }\n          });\n          return currentGroupOptions;\n        } else {\n          return [];\n        }\n      }\n    });\n\n    // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n    updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options.map(option => ({\n      value: option,\n      label: option,\n      isDisabled: false\n    }));\n    setOptionList(updatedOptionList);\n  }, [countList, groupList, selectedOptions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [groupList.map((group, index) => {\n      var _optionList$index;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: group.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedOptions[index] ? selectedOptions[index].value : '',\n          onChange: event => handleGroupChange(event, index),\n          disabled: index === 0 ? false : !isGroupEnabled[index],\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: group.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), (_optionList$index = optionList[index]) === null || _optionList$index === void 0 ? void 0 : _optionList$index.map((option, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: option.value,\n            disabled: option.isDisabled,\n            children: option.label\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC120\\uD0DD\\uD55C \\uC635\\uC158:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), selectedOptions.map((selectedOption, index) => {\n      var _groupList$index;\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [(_groupList$index = groupList[index]) === null || _groupList$index === void 0 ? void 0 : _groupList$index.title, \": \", selectedOption ? selectedOption.label : '-']\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"6SsHdK235oCi7Fun2tf7xZj3Dr0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","groupListData","jsxDEV","_jsxDEV","App","_s","selectedOptions","setSelectedOptions","isGroupEnabled","setIsGroupEnabled","Array","groupList","length","fill","optionList","setOptionList","countList","handleGroupChange","event","groupIndex","selectedOption","find","option","value","target","updatedOptions","updatedIsGroupEnabled","updated","updatedOptionList","map","group","index","options","_countList$find","remainCount","item","combination","label","isDisabled","previousSelectedOption","currentGroupOptions","seen","Set","forEach","has","push","add","children","_optionList$index","title","fileName","_jsxFileName","lineNumber","columnNumber","onChange","disabled","idx","_groupList$index","_c","$RefreshReg$"],"sources":["/Users/jiyeong/WebstormProjects/test2/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport groupListData from './groupListData'; // 정적 데이터 파일 import\n\nconst App = () => {\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n  const [optionList, setOptionList] = useState([]);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData.groupList;\n  const countList = groupListData.countList;\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (event, groupIndex) => {\n    const selectedOption = optionList[groupIndex].find(option => option.value === event.target.value);\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[groupIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // 현재 그룹 다음의 그룹을 enable\n    if (groupIndex < groupList.length - 1) {\n      const updatedIsGroupEnabled = [...isGroupEnabled];\n      updatedIsGroupEnabled[groupIndex + 1] = true;\n      setIsGroupEnabled(updatedIsGroupEnabled);\n    }\n  };\n\n  // 초기화 시 첫 번째 그룹 enable\n  useEffect(() => {\n    setIsGroupEnabled(updatedIsGroupEnabled => {\n      const updated = [...updatedIsGroupEnabled];\n      updated[0] = true;\n      return updated;\n    });\n  }, []);\n\n  // 각 셀렉터의 옵션 설정\n  useEffect(() => {\n    const updatedOptionList = groupList.map((group, index) => {\n      if (index === 0) {\n        // 첫 번째 셀렉터의 옵션 설정\n        return group.options.map(option => {\n          const remainCount = countList.find(item => item.combination[0] === option)?.remainCount || 0;\n          const label = remainCount === 0 ? `${option} (품절)` : option;\n          return {\n            value: option,\n            label: label,\n            isDisabled: remainCount === 0\n          };\n        });\n      } else {\n        const previousSelectedOption = selectedOptions[index - 1];\n        if (previousSelectedOption) {\n          // 중복된 조합을 필터링하여 하나의 옵션으로만 표시\n          const currentGroupOptions = [];\n          const seen = new Set();\n          countList.forEach(item => {\n            if (item.combination[index] && item.combination[index - 1] === previousSelectedOption.value && !seen.has(item.combination[index])) {\n              const label = item.remainCount === 0 ? `${item.combination[index]} (품절)` : `${item.combination[index]} (${item.remainCount} 개 남음)`;\n              currentGroupOptions.push({\n                value: item.combination[index],\n                label: label,\n                isDisabled: item.remainCount === 0\n              });\n              seen.add(item.combination[index]);\n            }\n          });\n          return currentGroupOptions;\n        } else {\n          return [];\n        }\n      }\n    });\n\n    // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n    updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options.map(option => ({\n      value: option,\n      label: option,\n      isDisabled: false\n    }));\n\n    setOptionList(updatedOptionList);\n  }, [countList, groupList, selectedOptions]);\n\n  return (\n    <div>\n      {groupList.map((group, index) => (\n        <div key={index}>\n          <h2>{group.title}</h2>\n          <select\n            value={selectedOptions[index] ? selectedOptions[index].value : ''}\n            onChange={(event) => handleGroupChange(event, index)}\n            disabled={index === 0 ? false : !isGroupEnabled[index]}\n          >\n            <option value=\"\" disabled={true}>{group.title}</option>\n            {optionList[index]?.map((option, idx) => (\n              <option key={idx} value={option.value} disabled={option.isDisabled}>{option.label}</option>\n            ))}\n          </select>\n        </div>\n      ))}\n      <h2>선택한 옵션:</h2>\n      {selectedOptions.map((selectedOption, index) => (\n        <p key={index}>\n          {groupList[index]?.title}: {selectedOption ? selectedOption.label : '-'}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
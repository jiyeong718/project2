{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import groupListData from './groupListData';\n//\n// const App = () => {\n//   const [selecteOptions, setSelecteOptions] = useState([]);\n//   const [isEnabled, setIsEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//   const countList = groupListData.countList;\n//\n//   // 함수: 선택 가능한 옵션과 라벨 생성\n//   const getOptionList = (index, update) => {\n//     const nextIndex = index + 1;\n//     const updateList = groupList[nextIndex].options.map(option => {\n//       const availableOption = countList.some(item => {\n//         let available = true;\n//         for (let i = 0; i <= index; i++) {\n//           if (update[i]) {\n//             if (item.combination[i] !== update[i].value) {\n//               available = false;\n//               break;\n//             }\n//           } else {\n//             available = false;\n//             break;\n//           }\n//         }\n//         return available && item.combination[nextIndex] === option && item.remainCount !== 0;\n//       });\n//\n//       const countLabel = countList.find(item => {\n//         let match = true;\n//         for (let i = 0; i <= index; i++) {\n//           if (update[i]) {\n//             if (item.combination[i] !== update[i].value) {\n//               match = false;\n//               break;\n//             }\n//           } else {\n//             match = false;\n//             break;\n//           }\n//         }\n//         return match && item.combination[nextIndex] === option;\n//       })?.remainCount;\n//\n//       const label = availableOption ? `${option} (${countLabel} 개 남음)` : `${option} (품절)`;\n//       return {\n//         value: option,\n//         label: label,\n//         isDisabled: !availableOption\n//       };\n//     });\n//\n//     return updateList;\n//   };\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (event, index) => {\n//     // 현재 셀렉터에서 선택한 옵션\n//     const selectedOption = optionList[index].find(option => option.value === event.target.value);\n//\n//     // 옵션 배열을 복사하여 업데이트\n//     const updateOptions = selecteOptions.slice();\n//     updateOptions[index] = selectedOption;\n//     setSelecteOptions(updateOptions);\n//\n//     // 현재 셀렉터 다음의 셀렉터를 enable\n//     if (index < groupList.length - 1) {\n//       const updatedIsEnabled = isEnabled.slice(); // isEnabled 배열 복사\n//       updatedIsEnabled[index + 1] = true;\n//       setIsEnabled(updatedIsEnabled);\n//     }\n//\n//     // 다음 셀렉터의 옵션 리스트 업데이트\n//     if (index < groupList.length - 1) {\n//       const updateOptionList = getOptionList(index, updateOptions);\n//\n//       // optionList 배열 복사\n//       const listArray = optionList.slice();\n//       listArray[index + 1] = updateOptionList;\n//       setOptionList(listArray);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 셀렉털를 enable\n//   useEffect(() => {\n//     setIsEnabled(updateIsEnabled => {\n//       return updateIsEnabled.map((value, index) => {\n//         return index === 0 ? true : value;\n//       });\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updateOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         // 첫 번째 셀렉터의 옵션 설정\n//         return group.options.map(option => {\n//           const availableOption = countList.some(item => item.combination[0] === option && item.remainCount !== 0);\n//           const label = availableOption ? option : `${option} (품절)`;\n//           return {\n//             value: option,\n//             label: label,\n//             isDisabled: !availableOption\n//           };\n//         });\n//       } else if (index > 0 && selecteOptions[index - 1]) {\n//         // 이전 셀렉터의 선택 옵션과 현재 셀렉터의 옵션 조합에 따라 remainCount를 확인하여 품절 여부를 설정\n//         const prevSelecteOption = selecteOptions[index - 1];\n//         return group.options.map(option => {\n//           const availableOption = countList.some(item =>\n//             item.combination[index - 1] === prevSelecteOption.value &&\n//             item.combination[index] === option &&\n//             item.remainCount !== 0\n//           );\n//           const countLabel = countList.find(item =>\n//             item.combination[index - 1] === prevSelecteOption.value &&\n//             item.combination[index] === option)?.remainCount;\n//           const label = availableOption ? `${option} (${countLabel} 개 남음)` : `${option} (품절)`;\n//           return {\n//             value: option,\n//             label: label,\n//             isDisabled: !availableOption\n//           };\n//         });\n//       } else {\n//         return [];\n//       }\n//     });\n//\n//     setOptionList(updateOptionList);\n//   }, [countList, groupList, selecteOptions]);\n//\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <select\n//             value={selecteOptions[index] ? selecteOptions[index].value : ''}\n//             onChange={(event) => handleGroupChange(event, index)}\n//             disabled={index === 0 ? false : !isEnabled[index]}\n//           >\n//             <option value=\"\" disabled={true}>{group.title}</option>\n//             {optionList[index]?.map((option, idx) => (\n//               <option key={idx} value={option.value} disabled={option.isDisabled}>\n//                 {option.label}\n//               </option>\n//             ))}\n//           </select>\n//         </div>\n//       ))}\n//       <h4>선택한 옵션:</h4>\n//       {selecteOptions.map((option, index) => (\n//         <p key={index}>\n//           {groupList[index]?.title}: {option ? option.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/jiyeong/WebstormProjects/test2/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import groupListData from './groupListData';\n//\n// const App = () => {\n//   const [selecteOptions, setSelecteOptions] = useState([]);\n//   const [isEnabled, setIsEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//   const countList = groupListData.countList;\n//\n//   // 함수: 선택 가능한 옵션과 라벨 생성\n//   const getOptionList = (index, update) => {\n//     const nextIndex = index + 1;\n//     const updateList = groupList[nextIndex].options.map(option => {\n//       const availableOption = countList.some(item => {\n//         let available = true;\n//         for (let i = 0; i <= index; i++) {\n//           if (update[i]) {\n//             if (item.combination[i] !== update[i].value) {\n//               available = false;\n//               break;\n//             }\n//           } else {\n//             available = false;\n//             break;\n//           }\n//         }\n//         return available && item.combination[nextIndex] === option && item.remainCount !== 0;\n//       });\n//\n//       const countLabel = countList.find(item => {\n//         let match = true;\n//         for (let i = 0; i <= index; i++) {\n//           if (update[i]) {\n//             if (item.combination[i] !== update[i].value) {\n//               match = false;\n//               break;\n//             }\n//           } else {\n//             match = false;\n//             break;\n//           }\n//         }\n//         return match && item.combination[nextIndex] === option;\n//       })?.remainCount;\n//\n//       const label = availableOption ? `${option} (${countLabel} 개 남음)` : `${option} (품절)`;\n//       return {\n//         value: option,\n//         label: label,\n//         isDisabled: !availableOption\n//       };\n//     });\n//\n//     return updateList;\n//   };\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (event, index) => {\n//     // 현재 셀렉터에서 선택한 옵션\n//     const selectedOption = optionList[index].find(option => option.value === event.target.value);\n//\n//     // 옵션 배열을 복사하여 업데이트\n//     const updateOptions = selecteOptions.slice();\n//     updateOptions[index] = selectedOption;\n//     setSelecteOptions(updateOptions);\n//\n//     // 현재 셀렉터 다음의 셀렉터를 enable\n//     if (index < groupList.length - 1) {\n//       const updatedIsEnabled = isEnabled.slice(); // isEnabled 배열 복사\n//       updatedIsEnabled[index + 1] = true;\n//       setIsEnabled(updatedIsEnabled);\n//     }\n//\n//     // 다음 셀렉터의 옵션 리스트 업데이트\n//     if (index < groupList.length - 1) {\n//       const updateOptionList = getOptionList(index, updateOptions);\n//\n//       // optionList 배열 복사\n//       const listArray = optionList.slice();\n//       listArray[index + 1] = updateOptionList;\n//       setOptionList(listArray);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 셀렉털를 enable\n//   useEffect(() => {\n//     setIsEnabled(updateIsEnabled => {\n//       return updateIsEnabled.map((value, index) => {\n//         return index === 0 ? true : value;\n//       });\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updateOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         // 첫 번째 셀렉터의 옵션 설정\n//         return group.options.map(option => {\n//           const availableOption = countList.some(item => item.combination[0] === option && item.remainCount !== 0);\n//           const label = availableOption ? option : `${option} (품절)`;\n//           return {\n//             value: option,\n//             label: label,\n//             isDisabled: !availableOption\n//           };\n//         });\n//       } else if (index > 0 && selecteOptions[index - 1]) {\n//         // 이전 셀렉터의 선택 옵션과 현재 셀렉터의 옵션 조합에 따라 remainCount를 확인하여 품절 여부를 설정\n//         const prevSelecteOption = selecteOptions[index - 1];\n//         return group.options.map(option => {\n//           const availableOption = countList.some(item =>\n//             item.combination[index - 1] === prevSelecteOption.value &&\n//             item.combination[index] === option &&\n//             item.remainCount !== 0\n//           );\n//           const countLabel = countList.find(item =>\n//             item.combination[index - 1] === prevSelecteOption.value &&\n//             item.combination[index] === option)?.remainCount;\n//           const label = availableOption ? `${option} (${countLabel} 개 남음)` : `${option} (품절)`;\n//           return {\n//             value: option,\n//             label: label,\n//             isDisabled: !availableOption\n//           };\n//         });\n//       } else {\n//         return [];\n//       }\n//     });\n//\n//     setOptionList(updateOptionList);\n//   }, [countList, groupList, selecteOptions]);\n//\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <select\n//             value={selecteOptions[index] ? selecteOptions[index].value : ''}\n//             onChange={(event) => handleGroupChange(event, index)}\n//             disabled={index === 0 ? false : !isEnabled[index]}\n//           >\n//             <option value=\"\" disabled={true}>{group.title}</option>\n//             {optionList[index]?.map((option, idx) => (\n//               <option key={idx} value={option.value} disabled={option.isDisabled}>\n//                 {option.label}\n//               </option>\n//             ))}\n//           </select>\n//         </div>\n//       ))}\n//       <h4>선택한 옵션:</h4>\n//       {selecteOptions.map((option, index) => (\n//         <p key={index}>\n//           {groupList[index]?.title}: {option ? option.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/jiyeong/WebstormProjects/test2/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import Select from 'react-select';\n// import groupListData from './optionData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState({});\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(false);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = { ...selectedOptions, [groupIndex]: selectedOption };\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 선택된 그룹 인덱스와 이전 그룹 인덱스를 비교하여 disable 상태 업데이트\n//     if (groupIndex < groupList.length - 1) {\n//       setIsGroupEnabled(true); // 현재 그룹 다음의 그룹을 enable\n//     } else {\n//       setIsGroupEnabled(false); // 마지막 그룹 선택 시 disable\n//     }\n//   };\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={group.options}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={group.placeholder}\n//             isDisabled={index > 0 && !selectedOptions[index - 1]} // 첫 번째 그룹은 항상 enable, 이후 그룹은 이전 그룹이 선택되어야 enable\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {Object.keys(selectedOptions).map((key, index) => (\n//         <p key={index}>\n//           {groupList[key].title}: {selectedOptions[key].label}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\nimport React, { useState } from 'react';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedOptions, setSelectedOptions] = useState({});\n  const [isGroupEnabled, setIsGroupEnabled] = useState(true); // 첫 번째 그룹은 항상 enable\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupListData = {\n    countList: [{\n      combination: ['스몰', '검정'],\n      remainCount: 0\n    }, {\n      combination: ['스몰', '하양'],\n      remainCount: 0\n    }, {\n      combination: ['스몰', '빨강'],\n      remainCount: 0\n    }, {\n      combination: ['라지', '검정'],\n      remainCount: 0\n    }, {\n      combination: ['라지', '하양'],\n      remainCount: 0\n    }, {\n      combination: ['라지', '빨강'],\n      remainCount: 0\n    }],\n    titleList: ['사이즈', '색상'],\n    groupList: [{\n      title: '사이즈',\n      options: ['스몰', '라지']\n    }, {\n      title: '색상',\n      options: ['검정', '하양', '빨강']\n    }]\n  };\n  const {\n    groupList,\n    titleList\n  } = groupListData;\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (selectedOption, groupIndex) => {\n    const updatedOptions = {\n      ...selectedOptions,\n      [groupIndex]: selectedOption\n    };\n    setSelectedOptions(updatedOptions);\n\n    // 현재 선택된 그룹 인덱스와 이전 그룹 인덱스를 비교하여 disable 상태 업데이트\n    if (groupIndex < groupList.length - 1) {\n      setIsGroupEnabled(true); // 현재 그룹 다음의 그룹을 enable\n    } else {\n      setIsGroupEnabled(false); // 마지막 그룹 선택 시 disable\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [groupList.map((group, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: group.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        options: group.options.map(option => ({\n          value: option,\n          label: option\n        })),\n        onChange: selectedOption => handleGroupChange(selectedOption, index),\n        value: selectedOptions[index],\n        placeholder: `Select ${group.title}`,\n        isDisabled: !isGroupEnabled || index > 0 && !selectedOptions[index - 1] // 첫 번째 그룹은 항상 enable, 이후 그룹은 이전 그룹이 선택되어야 enable\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC120\\uD0DD\\uD55C \\uC635\\uC158:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), titleList.map((title, index) => {\n      var _selectedOptions$inde;\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [title, \": \", ((_selectedOptions$inde = selectedOptions[index]) === null || _selectedOptions$inde === void 0 ? void 0 : _selectedOptions$inde.value) || '-']\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"vlMFRbzx9LVUt+hW5A0bjwjI4rg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Select","jsxDEV","_jsxDEV","App","_s","selectedOptions","setSelectedOptions","isGroupEnabled","setIsGroupEnabled","groupListData","countList","combination","remainCount","titleList","groupList","title","options","handleGroupChange","selectedOption","groupIndex","updatedOptions","length","children","map","group","index","fileName","_jsxFileName","lineNumber","columnNumber","option","value","label","onChange","placeholder","isDisabled","_selectedOptions$inde","_c","$RefreshReg$"],"sources":["/Users/jiyeong/WebstormProjects/test2/src/App.js"],"sourcesContent":["\n// import React, { useState } from 'react';\n// import Select from 'react-select';\n// import groupListData from './optionData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState({});\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(false);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = { ...selectedOptions, [groupIndex]: selectedOption };\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 선택된 그룹 인덱스와 이전 그룹 인덱스를 비교하여 disable 상태 업데이트\n//     if (groupIndex < groupList.length - 1) {\n//       setIsGroupEnabled(true); // 현재 그룹 다음의 그룹을 enable\n//     } else {\n//       setIsGroupEnabled(false); // 마지막 그룹 선택 시 disable\n//     }\n//   };\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={group.options}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={group.placeholder}\n//             isDisabled={index > 0 && !selectedOptions[index - 1]} // 첫 번째 그룹은 항상 enable, 이후 그룹은 이전 그룹이 선택되어야 enable\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {Object.keys(selectedOptions).map((key, index) => (\n//         <p key={index}>\n//           {groupList[key].title}: {selectedOptions[key].label}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n\nimport React, { useState } from 'react';\nimport Select from 'react-select';\n\nconst App = () => {\n  const [selectedOptions, setSelectedOptions] = useState({});\n  const [isGroupEnabled, setIsGroupEnabled] = useState(true); // 첫 번째 그룹은 항상 enable\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupListData = {\n    countList: [\n      {\n        combination: ['스몰', '검정'],\n        remainCount: 0,\n      },\n      {\n        combination: ['스몰', '하양'],\n        remainCount: 0,\n      },\n      {\n        combination: ['스몰', '빨강'],\n        remainCount: 0,\n      },\n      {\n        combination: ['라지', '검정'],\n        remainCount: 0,\n      },\n      {\n        combination: ['라지', '하양'],\n        remainCount: 0,\n      },\n      {\n        combination: ['라지', '빨강'],\n        remainCount: 0,\n      },\n    ],\n    titleList: ['사이즈', '색상'],\n    groupList: [\n      { title: '사이즈', options: ['스몰', '라지'] },\n      { title: '색상', options: ['검정', '하양', '빨강'] },\n    ],\n  };\n\n  const { groupList, titleList } = groupListData;\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (selectedOption, groupIndex) => {\n    const updatedOptions = { ...selectedOptions, [groupIndex]: selectedOption };\n    setSelectedOptions(updatedOptions);\n\n    // 현재 선택된 그룹 인덱스와 이전 그룹 인덱스를 비교하여 disable 상태 업데이트\n    if (groupIndex < groupList.length - 1) {\n      setIsGroupEnabled(true); // 현재 그룹 다음의 그룹을 enable\n    } else {\n      setIsGroupEnabled(false); // 마지막 그룹 선택 시 disable\n    }\n  };\n\n  return (\n    <div>\n      {groupList.map((group, index) => (\n        <div key={index}>\n          <h2>{group.title}</h2>\n          <Select\n            options={group.options.map(option => ({ value: option, label: option }))}\n            onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n            value={selectedOptions[index]}\n            placeholder={`Select ${group.title}`}\n            isDisabled={!isGroupEnabled || (index > 0 && !selectedOptions[index - 1])} // 첫 번째 그룹은 항상 enable, 이후 그룹은 이전 그룹이 선택되어야 enable\n          />\n        </div>\n      ))}\n      <h2>선택한 옵션:</h2>\n      {titleList.map((title, index) => (\n        <p key={index}>\n          {title}: {selectedOptions[index]?.value || '-'}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACQ,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE5D;EACA,MAAMU,aAAa,GAAG;IACpBC,SAAS,EAAE,CACT;MACEC,WAAW,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACzBC,WAAW,EAAE;IACf,CAAC,EACD;MACED,WAAW,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACzBC,WAAW,EAAE;IACf,CAAC,EACD;MACED,WAAW,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACzBC,WAAW,EAAE;IACf,CAAC,EACD;MACED,WAAW,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACzBC,WAAW,EAAE;IACf,CAAC,EACD;MACED,WAAW,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACzBC,WAAW,EAAE;IACf,CAAC,EACD;MACED,WAAW,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACzBC,WAAW,EAAE;IACf,CAAC,CACF;IACDC,SAAS,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;IACxBC,SAAS,EAAE,CACT;MAAEC,KAAK,EAAE,KAAK;MAAEC,OAAO,EAAE,CAAC,IAAI,EAAE,IAAI;IAAE,CAAC,EACvC;MAAED,KAAK,EAAE,IAAI;MAAEC,OAAO,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI;IAAE,CAAC;EAEhD,CAAC;EAED,MAAM;IAAEF,SAAS;IAAED;EAAU,CAAC,GAAGJ,aAAa;;EAE9C;EACA,MAAMQ,iBAAiB,GAAGA,CAACC,cAAc,EAAEC,UAAU,KAAK;IACxD,MAAMC,cAAc,GAAG;MAAE,GAAGf,eAAe;MAAE,CAACc,UAAU,GAAGD;IAAe,CAAC;IAC3EZ,kBAAkB,CAACc,cAAc,CAAC;;IAElC;IACA,IAAID,UAAU,GAAGL,SAAS,CAACO,MAAM,GAAG,CAAC,EAAE;MACrCb,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3B,CAAC,MAAM;MACLA,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC5B;EACF,CAAC;EAED,oBACEN,OAAA;IAAAoB,QAAA,GACGR,SAAS,CAACS,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBAC1BvB,OAAA;MAAAoB,QAAA,gBACEpB,OAAA;QAAAoB,QAAA,EAAKE,KAAK,CAACT;MAAK;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACtB3B,OAAA,CAACF,MAAM;QACLgB,OAAO,EAAEQ,KAAK,CAACR,OAAO,CAACO,GAAG,CAACO,MAAM,KAAK;UAAEC,KAAK,EAAED,MAAM;UAAEE,KAAK,EAAEF;QAAO,CAAC,CAAC,CAAE;QACzEG,QAAQ,EAAGf,cAAc,IAAKD,iBAAiB,CAACC,cAAc,EAAEO,KAAK,CAAE;QACvEM,KAAK,EAAE1B,eAAe,CAACoB,KAAK,CAAE;QAC9BS,WAAW,EAAG,UAASV,KAAK,CAACT,KAAM,EAAE;QACrCoB,UAAU,EAAE,CAAC5B,cAAc,IAAKkB,KAAK,GAAG,CAAC,IAAI,CAACpB,eAAe,CAACoB,KAAK,GAAG,CAAC,CAAG,CAAC;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5E,CAAC;IAAA,GARMJ,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASV,CACN,CAAC,eACF3B,OAAA;MAAAoB,QAAA,EAAI;IAAO;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACfhB,SAAS,CAACU,GAAG,CAAC,CAACR,KAAK,EAAEU,KAAK;MAAA,IAAAW,qBAAA;MAAA,oBAC1BlC,OAAA;QAAAoB,QAAA,GACGP,KAAK,EAAC,IAAE,EAAC,EAAAqB,qBAAA,GAAA/B,eAAe,CAACoB,KAAK,CAAC,cAAAW,qBAAA,uBAAtBA,qBAAA,CAAwBL,KAAK,KAAI,GAAG;MAAA,GADxCN,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CAAC;IAAA,CACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACzB,EAAA,CA5EID,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AA8ET,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/jiyeong/WebstormProjects/test2/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport groupListData from './groupListData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [isEnabled, setIsEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n  const [optionList, setOptionList] = useState([]);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData.groupList;\n  const countList = groupListData.countList;\n\n  // 함수: 선택 가능한 옵션과 라벨 생성\n  const getOptionList = (index, update) => {\n    const nextIndex = index + 1;\n    const updatedList = groupList[nextIndex].options.map(option => {\n      var _countList$find;\n      const hasAvailableOption = countList.some(item => {\n        let available = true;\n        for (let i = 0; i <= index; i++) {\n          if (update[i]) {\n            if (item.combination[i] !== update[i].value) {\n              available = false;\n              break;\n            }\n          } else {\n            available = false;\n            break;\n          }\n        }\n        return available && item.combination[nextIndex] === option && item.remainCount !== 0;\n      });\n      const countLabel = (_countList$find = countList.find(item => {\n        let match = true;\n        for (let i = 0; i <= index; i++) {\n          if (update[i]) {\n            if (item.combination[i] !== update[i].value) {\n              match = false;\n              break;\n            }\n          } else {\n            match = false;\n            break;\n          }\n        }\n        return match && item.combination[nextIndex] === option;\n      })) === null || _countList$find === void 0 ? void 0 : _countList$find.remainCount;\n      const label = hasAvailableOption ? `${option} (${countLabel} 개 남음)` : `${option} (품절)`;\n      return {\n        value: option,\n        label: label,\n        isDisabled: !hasAvailableOption\n      };\n    });\n    return updatedList;\n  };\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (event, groupIndex) => {\n    // 현재 셀렉터에서 선택한 옵션\n    const selectedOption = optionList[groupIndex].find(option => option.value === event.target.value);\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[groupIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // 현재 셀렉터 다음의 셀렉터를 enable\n    if (groupIndex < groupList.length - 1) {\n      const updatedIsGroupEnabled = [...isEnabled];\n      updatedIsGroupEnabled[groupIndex + 1] = true;\n      setIsEnabled(updatedIsGroupEnabled);\n    }\n\n    // 다음 셀렉터의 옵션 리스트 업데이트\n    if (groupIndex < groupList.length - 1) {\n      const updatedOptionList = getOptionListForGroup(groupIndex, updatedOptions);\n\n      // 다음 셀렉터의 옵션 리스트 업데이트\n      const updatedOptionListArray = [...optionList];\n      updatedOptionListArray[groupIndex + 1] = updatedOptionList;\n      setOptionList(updatedOptionListArray);\n    }\n  };\n\n  // 초기화 시 첫 번째 그룹 enable\n  useEffect(() => {\n    setIsEnabled(updatedIsGroupEnabled => {\n      const updated = [...updatedIsGroupEnabled];\n      updated[0] = true;\n      return updated;\n    });\n  }, []);\n\n  // 각 셀렉터의 옵션 설정\n  useEffect(() => {\n    const updatedOptionList = groupList.map((group, index) => {\n      if (index === 0) {\n        // 첫 번째 셀렉터의 옵션 설정\n        return group.options.map(option => {\n          const hasAvailableOption = countList.some(item => item.combination[0] === option && item.remainCount !== 0);\n          const label = hasAvailableOption ? option : `${option} (품절)`;\n          return {\n            value: option,\n            label: label,\n            isDisabled: !hasAvailableOption\n          };\n        });\n      } else if (index > 0 && selectedOptions[index - 1]) {\n        // 이전 셀렉터의 선택 옵션과 현재 셀렉터의 옵션 조합에 따라 remainCount를 확인하여 품절 여부를 설정\n        const previousSelectedOption = selectedOptions[index - 1];\n        return group.options.map(option => {\n          var _countList$find2;\n          const hasAvailableOption = countList.some(item => item.combination[index - 1] === previousSelectedOption.value && item.combination[index] === option && item.remainCount !== 0);\n          const countLabel = (_countList$find2 = countList.find(item => item.combination[index - 1] === previousSelectedOption.value && item.combination[index] === option)) === null || _countList$find2 === void 0 ? void 0 : _countList$find2.remainCount;\n          const label = hasAvailableOption ? `${option} (${countLabel} 개 남음)` : `${option} (품절)`;\n          return {\n            value: option,\n            label: label,\n            isDisabled: !hasAvailableOption\n          };\n        });\n      } else {\n        return [];\n      }\n    });\n    setOptionList(updatedOptionList);\n  }, [countList, groupList, selectedOptions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [groupList.map((group, index) => {\n      var _optionList$index;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: group.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedOptions[index] ? selectedOptions[index].value : '',\n          onChange: event => handleGroupChange(event, index),\n          disabled: index === 0 ? false : !isEnabled[index],\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: group.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this), (_optionList$index = optionList[index]) === null || _optionList$index === void 0 ? void 0 : _optionList$index.map((option, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: option.value,\n            disabled: option.isDisabled,\n            children: option.label\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"\\uC120\\uD0DD\\uD55C \\uC635\\uC158:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), selectedOptions.map((selectedOption, index) => {\n      var _groupList$index;\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [(_groupList$index = groupList[index]) === null || _groupList$index === void 0 ? void 0 : _groupList$index.title, \": \", selectedOption ? selectedOption.label : '-']\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"4LwfR7m3ghJtadyNVFvNhjeyZ2w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","groupListData","jsxDEV","_jsxDEV","App","_s","selectedOptions","setSelectedOptions","isEnabled","setIsEnabled","Array","groupList","length","fill","optionList","setOptionList","countList","getOptionList","index","update","nextIndex","updatedList","options","map","option","_countList$find","hasAvailableOption","some","item","available","i","combination","value","remainCount","countLabel","find","match","label","isDisabled","handleGroupChange","event","groupIndex","selectedOption","target","updatedOptions","updatedIsGroupEnabled","updatedOptionList","getOptionListForGroup","updatedOptionListArray","updated","group","previousSelectedOption","_countList$find2","children","_optionList$index","title","fileName","_jsxFileName","lineNumber","columnNumber","onChange","disabled","idx","_groupList$index","_c","$RefreshReg$"],"sources":["/Users/jiyeong/WebstormProjects/test2/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport groupListData from './groupListData';\n\nconst App = () => {\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [isEnabled, setIsEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n  const [optionList, setOptionList] = useState([]);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData.groupList;\n  const countList = groupListData.countList;\n\n  // 함수: 선택 가능한 옵션과 라벨 생성\n  const getOptionList = (index, update) => {\n    const nextIndex = index + 1;\n    const updatedList = groupList[nextIndex].options.map(option => {\n      const hasAvailableOption = countList.some(item => {\n        let available = true;\n        for (let i = 0; i <= index; i++) {\n          if (update[i]) {\n            if (item.combination[i] !== update[i].value) {\n              available = false;\n              break;\n            }\n          } else {\n            available = false;\n            break;\n          }\n        }\n        return available && item.combination[nextIndex] === option && item.remainCount !== 0;\n      });\n\n      const countLabel = countList.find(item => {\n        let match = true;\n        for (let i = 0; i <= index; i++) {\n          if (update[i]) {\n            if (item.combination[i] !== update[i].value) {\n              match = false;\n              break;\n            }\n          } else {\n            match = false;\n            break;\n          }\n        }\n        return match && item.combination[nextIndex] === option;\n      })?.remainCount;\n\n      const label = hasAvailableOption ? `${option} (${countLabel} 개 남음)` : `${option} (품절)`;\n      return {\n        value: option,\n        label: label,\n        isDisabled: !hasAvailableOption\n      };\n    });\n\n    return updatedList;\n  };\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (event, groupIndex) => {\n    // 현재 셀렉터에서 선택한 옵션\n    const selectedOption = optionList[groupIndex].find(option => option.value === event.target.value);\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[groupIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // 현재 셀렉터 다음의 셀렉터를 enable\n    if (groupIndex < groupList.length - 1) {\n      const updatedIsGroupEnabled = [...isEnabled];\n      updatedIsGroupEnabled[groupIndex + 1] = true;\n      setIsEnabled(updatedIsGroupEnabled);\n    }\n\n    // 다음 셀렉터의 옵션 리스트 업데이트\n    if (groupIndex < groupList.length - 1) {\n      const updatedOptionList = getOptionListForGroup(groupIndex, updatedOptions);\n\n      // 다음 셀렉터의 옵션 리스트 업데이트\n      const updatedOptionListArray = [...optionList];\n      updatedOptionListArray[groupIndex + 1] = updatedOptionList;\n      setOptionList(updatedOptionListArray);\n    }\n  };\n\n  // 초기화 시 첫 번째 그룹 enable\n  useEffect(() => {\n    setIsEnabled(updatedIsGroupEnabled => {\n      const updated = [...updatedIsGroupEnabled];\n      updated[0] = true;\n      return updated;\n    });\n  }, []);\n\n  // 각 셀렉터의 옵션 설정\n  useEffect(() => {\n    const updatedOptionList = groupList.map((group, index) => {\n      if (index === 0) {\n        // 첫 번째 셀렉터의 옵션 설정\n        return group.options.map(option => {\n          const hasAvailableOption = countList.some(item => item.combination[0] === option && item.remainCount !== 0);\n          const label = hasAvailableOption ? option : `${option} (품절)`;\n          return {\n            value: option,\n            label: label,\n            isDisabled: !hasAvailableOption\n          };\n        });\n      } else if (index > 0 && selectedOptions[index - 1]) {\n        // 이전 셀렉터의 선택 옵션과 현재 셀렉터의 옵션 조합에 따라 remainCount를 확인하여 품절 여부를 설정\n        const previousSelectedOption = selectedOptions[index - 1];\n        return group.options.map(option => {\n          const hasAvailableOption = countList.some(item =>\n            item.combination[index - 1] === previousSelectedOption.value &&\n            item.combination[index] === option &&\n            item.remainCount !== 0\n          );\n          const countLabel = countList.find(item =>\n            item.combination[index - 1] === previousSelectedOption.value &&\n            item.combination[index] === option)?.remainCount;\n          const label = hasAvailableOption ? `${option} (${countLabel} 개 남음)` : `${option} (품절)`;\n          return {\n            value: option,\n            label: label,\n            isDisabled: !hasAvailableOption\n          };\n        });\n      } else {\n        return [];\n      }\n    });\n\n    setOptionList(updatedOptionList);\n  }, [countList, groupList, selectedOptions]);\n\n\n  return (\n    <div>\n      {groupList.map((group, index) => (\n        <div key={index}>\n          <h2>{group.title}</h2>\n          <select\n            value={selectedOptions[index] ? selectedOptions[index].value : ''}\n            onChange={(event) => handleGroupChange(event, index)}\n            disabled={index === 0 ? false : !isEnabled[index]}\n          >\n            <option value=\"\" disabled={true}>{group.title}</option>\n            {optionList[index]?.map((option, idx) => (\n              <option key={idx} value={option.value} disabled={option.isDisabled}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n      ))}\n      <h4>선택한 옵션:</h4>\n      {selectedOptions.map((selectedOption, index) => (\n        <p key={index}>\n          {groupList[index]?.title}: {selectedOption ? selectedOption.label : '-'}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// import React, { useState } from 'react';\n// import Select from 'react-select';\n// import groupListData from './groupListData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState(Array(groupListData.groupList.length).fill(null));\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = [...selectedOptions];\n//     updatedOptions[groupIndex] = selectedOption;\n//     setSelectedOptions(updatedOptions);\n//\n//     // 다음 그룹을 enable\n//     if (groupIndex < groupList.length - 1) {\n//       const updatedIsGroupEnabled = [...isGroupEnabled];\n//       updatedIsGroupEnabled[groupIndex + 1] = true;\n//       setIsGroupEnabled(updatedIsGroupEnabled);\n//     }\n//   };\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={group.options.map(option => ({ value: option, label: option }))} // Select 컴포넌트가 요구하는 형식으로 맞추기 위해 options를 변환\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={`Select ${group.title}`}\n//             isDisabled={index === 0 ? false : !isGroupEnabled[index]}\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {selectedOptions.map((selectedOption, index) => (\n//         <p key={index}>\n//           {groupList[index].title}: {selectedOption ? selectedOption.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/jiyeong/WebstormProjects/test2/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import Select from 'react-select';\n// import groupListData from './groupListData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState(Array(groupListData.groupList.length).fill(null));\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = [...selectedOptions];\n//     updatedOptions[groupIndex] = selectedOption;\n//     setSelectedOptions(updatedOptions);\n//\n//     // 다음 그룹을 enable\n//     if (groupIndex < groupList.length - 1) {\n//       const updatedIsGroupEnabled = [...isGroupEnabled];\n//       updatedIsGroupEnabled[groupIndex + 1] = true;\n//       setIsGroupEnabled(updatedIsGroupEnabled);\n//     }\n//   };\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={group.options.map(option => ({ value: option, label: option }))} // Select 컴포넌트가 요구하는 형식으로 맞추기 위해 options를 변환\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={`Select ${group.title}`}\n//             isDisabled={index === 0 ? false : !isGroupEnabled[index]}\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {selectedOptions.map((selectedOption, index) => (\n//         <p key={index}>\n//           {groupList[index].title}: {selectedOption ? selectedOption.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\n// import React, { useState } from 'react';\n// import Select from 'react-select';\n// import groupListData from './optionData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState({});\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(false);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = { ...selectedOptions, [groupIndex]: selectedOption };\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 선택된 그룹 인덱스와 이전 그룹 인덱스를 비교하여 disable 상태 업데이트\n//     if (groupIndex < groupList.length - 1) {\n//       setIsGroupEnabled(true); // 현재 그룹 다음의 그룹을 enable\n//     } else {\n//       setIsGroupEnabled(false); // 마지막 그룹 선택 시 disable\n//     }\n//   };\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={group.options}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={group.placeholder}\n//             isDisabled={index > 0 && !selectedOptions[index - 1]} // 첫 번째 그룹은 항상 enable, 이후 그룹은 이전 그룹이 선택되어야 enable\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {Object.keys(selectedOptions).map((key, index) => (\n//         <p key={index}>\n//           {groupList[key].title}: {selectedOptions[key].label}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n// import React, { useState } from 'react';\n// import Select from 'react-select';\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState({});\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(true); // 첫 번째 그룹은 항상 enable\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupListData = {\n//     countList: [\n//       {\n//         combination: ['스몰', '검정'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['스몰', '하양'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['스몰', '빨강'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['라지', '검정'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['라지', '하양'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['라지', '빨강'],\n//         remainCount: 0,\n//       },\n//     ],\n//     titleList: ['사이즈', '색상'],\n//     groupList: [\n//       { title: '사이즈', options: ['스몰', '라지'] },\n//       { title: '색상', options: ['검정', '하양', '빨강'] },\n//     ],\n//   };\n//\n//   const { groupList, titleList } = groupListData;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = { ...selectedOptions, [groupIndex]: selectedOption };\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 선택된 그룹 인덱스와 이전 그룹 인덱스를 비교하여 disable 상태 업데이트\n//     if (groupIndex < groupList.length - 1) {\n//       setIsGroupEnabled(true); // 현재 그룹 다음의 그룹을 enable\n//     } else {\n//       setIsGroupEnabled(false); // 마지막 그룹 선택 시 disable\n//     }\n//   };\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={group.options.map(option => ({ value: option, label: option }))}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={`Select ${group.title}`}\n//             isDisabled={!isGroupEnabled || (index > 0 && !selectedOptions[index - 1])} // 첫 번째 그룹은 항상 enable, 이후 그룹은 이전 그룹이 선택되어야 enable\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {titleList.map((title, index) => (\n//         <p key={index}>\n//           {title}: {selectedOptions[index]?.value || '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/jiyeong/WebstormProjects/test2/src/App.js"],"sourcesContent":["\n// import React, { useState } from 'react';\n// import Select from 'react-select';\n// import groupListData from './optionData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState({});\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(false);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = { ...selectedOptions, [groupIndex]: selectedOption };\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 선택된 그룹 인덱스와 이전 그룹 인덱스를 비교하여 disable 상태 업데이트\n//     if (groupIndex < groupList.length - 1) {\n//       setIsGroupEnabled(true); // 현재 그룹 다음의 그룹을 enable\n//     } else {\n//       setIsGroupEnabled(false); // 마지막 그룹 선택 시 disable\n//     }\n//   };\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={group.options}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={group.placeholder}\n//             isDisabled={index > 0 && !selectedOptions[index - 1]} // 첫 번째 그룹은 항상 enable, 이후 그룹은 이전 그룹이 선택되어야 enable\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {Object.keys(selectedOptions).map((key, index) => (\n//         <p key={index}>\n//           {groupList[key].title}: {selectedOptions[key].label}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n\n// import React, { useState } from 'react';\n// import Select from 'react-select';\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState({});\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(true); // 첫 번째 그룹은 항상 enable\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupListData = {\n//     countList: [\n//       {\n//         combination: ['스몰', '검정'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['스몰', '하양'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['스몰', '빨강'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['라지', '검정'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['라지', '하양'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['라지', '빨강'],\n//         remainCount: 0,\n//       },\n//     ],\n//     titleList: ['사이즈', '색상'],\n//     groupList: [\n//       { title: '사이즈', options: ['스몰', '라지'] },\n//       { title: '색상', options: ['검정', '하양', '빨강'] },\n//     ],\n//   };\n//\n//   const { groupList, titleList } = groupListData;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = { ...selectedOptions, [groupIndex]: selectedOption };\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 선택된 그룹 인덱스와 이전 그룹 인덱스를 비교하여 disable 상태 업데이트\n//     if (groupIndex < groupList.length - 1) {\n//       setIsGroupEnabled(true); // 현재 그룹 다음의 그룹을 enable\n//     } else {\n//       setIsGroupEnabled(false); // 마지막 그룹 선택 시 disable\n//     }\n//   };\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={group.options.map(option => ({ value: option, label: option }))}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={`Select ${group.title}`}\n//             isDisabled={!isGroupEnabled || (index > 0 && !selectedOptions[index - 1])} // 첫 번째 그룹은 항상 enable, 이후 그룹은 이전 그룹이 선택되어야 enable\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {titleList.map((title, index) => (\n//         <p key={index}>\n//           {title}: {selectedOptions[index]?.value || '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
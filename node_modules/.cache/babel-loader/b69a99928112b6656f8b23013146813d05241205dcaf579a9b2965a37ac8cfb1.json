{"ast":null,"code":"var _jsxFileName = \"/Users/jiyeong/WebstormProjects/test2/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import Select from 'react-select';\n// import groupListData from './groupListData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState(Array(groupListData.groupList.length).fill(null));\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//   const countList = groupListData.countList;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = [...selectedOptions];\n//     updatedOptions[groupIndex] = selectedOption;\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 그룹 다음의 그룹을 enable\n//     if (groupIndex < groupList.length - 1) {\n//       const updatedIsGroupEnabled = [...isGroupEnabled];\n//       updatedIsGroupEnabled[groupIndex + 1] = true;\n//       setIsGroupEnabled(updatedIsGroupEnabled);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 그룹 enable\n//   useEffect(() => {\n//     setIsGroupEnabled(updatedIsGroupEnabled => {\n//       const updated = [...updatedIsGroupEnabled];\n//       updated[0] = true;\n//       return updated;\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updatedOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         return group.options.map(option => ({\n//           value: option,\n//           label: option,\n//           isDisabled: false\n//         }));\n//       } else {\n//         const previousSelectedOption = selectedOptions[index - 1];\n//         return group.options.map(option => {\n//           const remainCount = countList.find(item => item.combination[index] === option)?.remainCount || 0;\n//           const label = remainCount === 0 ? `${option} (품절)` : `${option} (${remainCount} 개 남음)`;\n//           const isDisabled = remainCount === 0 || (previousSelectedOption && countList.find(item => item.combination[index - 1] === previousSelectedOption.value && item.combination[index] === option)?.remainCount === 0);\n//           return { value: option, label, isDisabled };\n//         });\n//       }\n//     });\n//\n//     // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n//     updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options.map(option => ({\n//       value: option,\n//       label: option,\n//       isDisabled: false\n//     }));\n//\n//     setOptionList(updatedOptionList);\n//   }, [countList, groupList, selectedOptions]);\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={optionList[index]}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={`Select ${group.title}`}\n//             isDisabled={index === 0 ? false : !isGroupEnabled[index]}\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {selectedOptions.map((selectedOption, index) => (\n//         <p key={index}>\n//           {groupList[index].title}: {selectedOption ? selectedOption.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport groupListData from './groupListData'; // 정적 데이터 파일 import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedOptions, setSelectedOptions] = useState(Array(groupListData.groupList.length).fill(null));\n  const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n  const [optionList, setOptionList] = useState([]);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData.groupList;\n  const countList = groupListData.countList;\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (selectedOption, groupIndex) => {\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[groupIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // 현재 그룹 다음의 그룹을 enable\n    if (groupIndex < groupList.length - 1) {\n      const updatedIsGroupEnabled = [...isGroupEnabled];\n      updatedIsGroupEnabled[groupIndex + 1] = true;\n      setIsGroupEnabled(updatedIsGroupEnabled);\n    }\n  };\n\n  // 초기화 시 첫 번째 그룹 enable\n  useEffect(() => {\n    setIsGroupEnabled(updatedIsGroupEnabled => {\n      const updated = [...updatedIsGroupEnabled];\n      updated[0] = true;\n      return updated;\n    });\n  }, []);\n\n  // 각 셀렉터의 옵션 설정\n  useEffect(() => {\n    var _selectedOptions$;\n    const updatedOptionList = groupList.map((group, index) => {\n      if (index === 0) {\n        return group.options.map(option => ({\n          value: option,\n          label: option,\n          isDisabled: false\n        }));\n      } else {\n        const previousSelectedOption = selectedOptions[index - 1];\n        return group.options.map(option => {\n          var _countList$find, _countList$find2;\n          const remainCount = ((_countList$find = countList.find(item => item.combination[index] === option)) === null || _countList$find === void 0 ? void 0 : _countList$find.remainCount) || 0;\n          const label = remainCount === 0 ? `${option} (품절)` : `${option} (${remainCount} 개 남음)`;\n          const isDisabled = remainCount === 0 || previousSelectedOption && ((_countList$find2 = countList.find(item => item.combination[index - 1] === previousSelectedOption.value && item.combination[index] === option)) === null || _countList$find2 === void 0 ? void 0 : _countList$find2.remainCount) === 0;\n          return {\n            value: option,\n            label,\n            isDisabled\n          };\n        });\n      }\n    });\n\n    // 첫 번째 셀렉터가 '라지'인 경우에만 두 번째 셀렉터의 옵션 설정\n    if (((_selectedOptions$ = selectedOptions[0]) === null || _selectedOptions$ === void 0 ? void 0 : _selectedOptions$.value) === '라지') {\n      const secondGroupIndex = 1; // 두 번째 그룹의 인덱스\n\n      // '라지'에 맞는 옵션들을 설정\n      updatedOptionList[secondGroupIndex] = groupList[secondGroupIndex].options.map(option => {\n        var _countList$find3, _countList$find4;\n        const remainCount = ((_countList$find3 = countList.find(item => item.combination[secondGroupIndex] === option)) === null || _countList$find3 === void 0 ? void 0 : _countList$find3.remainCount) || 0;\n        const label = remainCount === 0 ? `${option} (품절)` : `${option} (${remainCount} 개 남음)`;\n        const isDisabled = remainCount === 0 || selectedOptions[0] && ((_countList$find4 = countList.find(item => item.combination[0] === '라지' && item.combination[1] === option)) === null || _countList$find4 === void 0 ? void 0 : _countList$find4.remainCount) === 0;\n        return {\n          value: option,\n          label,\n          isDisabled\n        };\n      });\n    } else {\n      // 그 외의 경우는 기본적으로 설정된 옵션 리스트를 사용\n      updatedOptionList[1] = groupList[1].options.map(option => ({\n        value: option,\n        label: option,\n        isDisabled: false\n      }));\n    }\n\n    // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n    updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options.map(option => ({\n      value: option,\n      label: option,\n      isDisabled: false\n    }));\n    setOptionList(updatedOptionList);\n  }, [countList, groupList, selectedOptions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [groupList.map((group, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: group.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        options: optionList[index],\n        onChange: selectedOption => handleGroupChange(selectedOption, index),\n        value: selectedOptions[index],\n        placeholder: `Select ${group.title}`,\n        isDisabled: index === 0 ? false : !isGroupEnabled[index]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC120\\uD0DD\\uD55C \\uC635\\uC158:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), selectedOptions.map((selectedOption, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [groupList[index].title, \": \", selectedOption ? selectedOption.label : '-']\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"unnl/7mOdhae1nji+l0+uv4W3WQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Select","groupListData","jsxDEV","_jsxDEV","App","_s","selectedOptions","setSelectedOptions","Array","groupList","length","fill","isGroupEnabled","setIsGroupEnabled","optionList","setOptionList","countList","handleGroupChange","selectedOption","groupIndex","updatedOptions","updatedIsGroupEnabled","updated","_selectedOptions$","updatedOptionList","map","group","index","options","option","value","label","isDisabled","previousSelectedOption","_countList$find","_countList$find2","remainCount","find","item","combination","secondGroupIndex","_countList$find3","_countList$find4","children","title","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","_c","$RefreshReg$"],"sources":["/Users/jiyeong/WebstormProjects/test2/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import Select from 'react-select';\n// import groupListData from './groupListData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState(Array(groupListData.groupList.length).fill(null));\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//   const countList = groupListData.countList;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = [...selectedOptions];\n//     updatedOptions[groupIndex] = selectedOption;\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 그룹 다음의 그룹을 enable\n//     if (groupIndex < groupList.length - 1) {\n//       const updatedIsGroupEnabled = [...isGroupEnabled];\n//       updatedIsGroupEnabled[groupIndex + 1] = true;\n//       setIsGroupEnabled(updatedIsGroupEnabled);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 그룹 enable\n//   useEffect(() => {\n//     setIsGroupEnabled(updatedIsGroupEnabled => {\n//       const updated = [...updatedIsGroupEnabled];\n//       updated[0] = true;\n//       return updated;\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updatedOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         return group.options.map(option => ({\n//           value: option,\n//           label: option,\n//           isDisabled: false\n//         }));\n//       } else {\n//         const previousSelectedOption = selectedOptions[index - 1];\n//         return group.options.map(option => {\n//           const remainCount = countList.find(item => item.combination[index] === option)?.remainCount || 0;\n//           const label = remainCount === 0 ? `${option} (품절)` : `${option} (${remainCount} 개 남음)`;\n//           const isDisabled = remainCount === 0 || (previousSelectedOption && countList.find(item => item.combination[index - 1] === previousSelectedOption.value && item.combination[index] === option)?.remainCount === 0);\n//           return { value: option, label, isDisabled };\n//         });\n//       }\n//     });\n//\n//     // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n//     updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options.map(option => ({\n//       value: option,\n//       label: option,\n//       isDisabled: false\n//     }));\n//\n//     setOptionList(updatedOptionList);\n//   }, [countList, groupList, selectedOptions]);\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={optionList[index]}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={`Select ${group.title}`}\n//             isDisabled={index === 0 ? false : !isGroupEnabled[index]}\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {selectedOptions.map((selectedOption, index) => (\n//         <p key={index}>\n//           {groupList[index].title}: {selectedOption ? selectedOption.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n\nimport React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport groupListData from './groupListData'; // 정적 데이터 파일 import\n\nconst App = () => {\n  const [selectedOptions, setSelectedOptions] = useState(Array(groupListData.groupList.length).fill(null));\n  const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n  const [optionList, setOptionList] = useState([]);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData.groupList;\n  const countList = groupListData.countList;\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (selectedOption, groupIndex) => {\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[groupIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // 현재 그룹 다음의 그룹을 enable\n    if (groupIndex < groupList.length - 1) {\n      const updatedIsGroupEnabled = [...isGroupEnabled];\n      updatedIsGroupEnabled[groupIndex + 1] = true;\n      setIsGroupEnabled(updatedIsGroupEnabled);\n    }\n  };\n\n  // 초기화 시 첫 번째 그룹 enable\n  useEffect(() => {\n    setIsGroupEnabled(updatedIsGroupEnabled => {\n      const updated = [...updatedIsGroupEnabled];\n      updated[0] = true;\n      return updated;\n    });\n  }, []);\n\n  // 각 셀렉터의 옵션 설정\n  useEffect(() => {\n    const updatedOptionList = groupList.map((group, index) => {\n      if (index === 0) {\n        return group.options.map(option => ({\n          value: option,\n          label: option,\n          isDisabled: false\n        }));\n      } else {\n        const previousSelectedOption = selectedOptions[index - 1];\n        return group.options.map(option => {\n          const remainCount = countList.find(item => item.combination[index] === option)?.remainCount || 0;\n          const label = remainCount === 0 ? `${option} (품절)` : `${option} (${remainCount} 개 남음)`;\n          const isDisabled = remainCount === 0 || (previousSelectedOption && countList.find(item => item.combination[index - 1] === previousSelectedOption.value && item.combination[index] === option)?.remainCount === 0);\n          return { value: option, label, isDisabled };\n        });\n      }\n    });\n\n    // 첫 번째 셀렉터가 '라지'인 경우에만 두 번째 셀렉터의 옵션 설정\n    if (selectedOptions[0]?.value === '라지') {\n      const secondGroupIndex = 1; // 두 번째 그룹의 인덱스\n\n      // '라지'에 맞는 옵션들을 설정\n      updatedOptionList[secondGroupIndex] = groupList[secondGroupIndex].options.map(option => {\n        const remainCount = countList.find(item => item.combination[secondGroupIndex] === option)?.remainCount || 0;\n        const label = remainCount === 0 ? `${option} (품절)` : `${option} (${remainCount} 개 남음)`;\n        const isDisabled = remainCount === 0 || (selectedOptions[0] && countList.find(item => item.combination[0] === '라지' && item.combination[1] === option)?.remainCount === 0);\n        return { value: option, label, isDisabled };\n      });\n    } else {\n      // 그 외의 경우는 기본적으로 설정된 옵션 리스트를 사용\n      updatedOptionList[1] = groupList[1].options.map(option => ({\n        value: option,\n        label: option,\n        isDisabled: false\n      }));\n    }\n\n    // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n    updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options.map(option => ({\n      value: option,\n      label: option,\n      isDisabled: false\n    }));\n\n    setOptionList(updatedOptionList);\n  }, [countList, groupList, selectedOptions]);\n\n  return (\n    <div>\n      {groupList.map((group, index) => (\n        <div key={index}>\n          <h2>{group.title}</h2>\n          <Select\n            options={optionList[index]}\n            onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n            value={selectedOptions[index]}\n            placeholder={`Select ${group.title}`}\n            isDisabled={index === 0 ? false : !isGroupEnabled[index]}\n          />\n        </div>\n      ))}\n      <h2>선택한 옵션:</h2>\n      {selectedOptions.map((selectedOption, index) => (\n        <p key={index}>\n          {groupList[index].title}: {selectedOption ? selectedOption.label : '-'}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
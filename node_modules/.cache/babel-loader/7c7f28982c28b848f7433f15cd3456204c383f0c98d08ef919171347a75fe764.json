{"ast":null,"code":"var _jsxFileName = \"/Users/jiyeong/WebstormProjects/test2/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport groupListData from './groupListData'; // 정적 데이터 파일 import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedOptions, setSelectedOptions] = useState(Array(groupListData.groupList.length).fill(null));\n  const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n  const [optionList, setOptionList] = useState([]);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData.groupList;\n  const countList = groupListData.countList;\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (selectedOption, groupIndex) => {\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[groupIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // 현재 그룹 다음의 그룹을 enable\n    if (groupIndex < groupList.length - 1) {\n      const updatedIsGroupEnabled = [...isGroupEnabled];\n      updatedIsGroupEnabled[groupIndex + 1] = true;\n      setIsGroupEnabled(updatedIsGroupEnabled);\n    }\n  };\n\n  // 초기화 시 첫 번째 그룹 enable\n  useEffect(() => {\n    setIsGroupEnabled(updatedIsGroupEnabled => {\n      const updated = [...updatedIsGroupEnabled];\n      updated[0] = true;\n      return updated;\n    });\n  }, []);\n\n  // 각 셀렉터의 옵션 설정\n  useEffect(() => {\n    const updatedOptionList = groupList.map((group, index) => {\n      if (index === 0) {\n        return group.options.map(option => ({\n          value: option,\n          label: option,\n          isDisabled: false\n        }));\n      } else {\n        const previousSelectedOption = selectedOptions[index - 1];\n        return group.options.map(option => {\n          var _countList$find, _countList$find2;\n          const remainCount = ((_countList$find = countList.find(item => item.combination[index] === option)) === null || _countList$find === void 0 ? void 0 : _countList$find.remainCount) || 0;\n          const label = remainCount === 0 ? `${option} (품절)` : `${option} (${remainCount} 개 남음)`;\n          const isDisabled = remainCount === 0 || previousSelectedOption && ((_countList$find2 = countList.find(item => item.combination[index - 1] === previousSelectedOption.value && item.combination[index] === option)) === null || _countList$find2 === void 0 ? void 0 : _countList$find2.remainCount) === 0;\n          return {\n            value: option,\n            label,\n            isDisabled\n          };\n        });\n      }\n    });\n\n    // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n    updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options.map(option => ({\n      value: option,\n      label: option,\n      isDisabled: false\n    }));\n    setOptionList(updatedOptionList);\n  }, [countList, groupList, selectedOptions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [groupList.map((group, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: group.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        options: optionList[index],\n        onChange: selectedOption => handleGroupChange(selectedOption, index),\n        value: selectedOptions[index],\n        placeholder: `Select ${group.title}`,\n        isDisabled: index === 0 ? false : !isGroupEnabled[index]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC120\\uD0DD\\uD55C \\uC635\\uC158:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), selectedOptions.map((selectedOption, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [groupList[index].title, \": \", selectedOption ? selectedOption.label : '-']\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"unnl/7mOdhae1nji+l0+uv4W3WQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Select","groupListData","jsxDEV","_jsxDEV","App","_s","selectedOptions","setSelectedOptions","Array","groupList","length","fill","isGroupEnabled","setIsGroupEnabled","optionList","setOptionList","countList","handleGroupChange","selectedOption","groupIndex","updatedOptions","updatedIsGroupEnabled","updated","updatedOptionList","map","group","index","options","option","value","label","isDisabled","previousSelectedOption","_countList$find","_countList$find2","remainCount","find","item","combination","children","title","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","_c","$RefreshReg$"],"sources":["/Users/jiyeong/WebstormProjects/test2/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport groupListData from './groupListData'; // 정적 데이터 파일 import\n\nconst App = () => {\n  const [selectedOptions, setSelectedOptions] = useState(Array(groupListData.groupList.length).fill(null));\n  const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n  const [optionList, setOptionList] = useState([]);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData.groupList;\n  const countList = groupListData.countList;\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (selectedOption, groupIndex) => {\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[groupIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // 현재 그룹 다음의 그룹을 enable\n    if (groupIndex < groupList.length - 1) {\n      const updatedIsGroupEnabled = [...isGroupEnabled];\n      updatedIsGroupEnabled[groupIndex + 1] = true;\n      setIsGroupEnabled(updatedIsGroupEnabled);\n    }\n  };\n\n  // 초기화 시 첫 번째 그룹 enable\n  useEffect(() => {\n    setIsGroupEnabled(updatedIsGroupEnabled => {\n      const updated = [...updatedIsGroupEnabled];\n      updated[0] = true;\n      return updated;\n    });\n  }, []);\n\n  // 각 셀렉터의 옵션 설정\n  useEffect(() => {\n    const updatedOptionList = groupList.map((group, index) => {\n      if (index === 0) {\n        return group.options.map(option => ({\n          value: option,\n          label: option,\n          isDisabled: false\n        }));\n      } else {\n        const previousSelectedOption = selectedOptions[index - 1];\n        return group.options.map(option => {\n          const remainCount = countList.find(item => item.combination[index] === option)?.remainCount || 0;\n          const label = remainCount === 0 ? `${option} (품절)` : `${option} (${remainCount} 개 남음)`;\n          const isDisabled = remainCount === 0 || (previousSelectedOption && countList.find(item => item.combination[index - 1] === previousSelectedOption.value && item.combination[index] === option)?.remainCount === 0);\n          return { value: option, label, isDisabled };\n        });\n      }\n    });\n\n    // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n    updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options.map(option => ({\n      value: option,\n      label: option,\n      isDisabled: false\n    }));\n\n    setOptionList(updatedOptionList);\n  }, [countList, groupList, selectedOptions]);\n\n  return (\n    <div>\n      {groupList.map((group, index) => (\n        <div key={index}>\n          <h2>{group.title}</h2>\n          <Select\n            options={optionList[index]}\n            onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n            value={selectedOptions[index]}\n            placeholder={`Select ${group.title}`}\n            isDisabled={index === 0 ? false : !isGroupEnabled[index]}\n          />\n        </div>\n      ))}\n      <h2>선택한 옵션:</h2>\n      {selectedOptions.map((selectedOption, index) => (\n        <p key={index}>\n          {groupList[index].title}: {selectedOption ? selectedOption.label : '-'}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
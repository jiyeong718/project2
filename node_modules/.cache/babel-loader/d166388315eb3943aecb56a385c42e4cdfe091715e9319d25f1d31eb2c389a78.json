{"ast":null,"code":"var _jsxFileName = \"/Users/jiyeong/WebstormProjects/test2/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import Select from 'react-select';\n// import groupListData from './groupListData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState([]);\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//   const countList = groupListData.countList;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = [...selectedOptions];\n//     updatedOptions[groupIndex] = selectedOption;\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 그룹 다음의 그룹을 enable\n//     if (groupIndex < groupList.length - 1) {\n//       const updatedIsGroupEnabled = [...isGroupEnabled];\n//       updatedIsGroupEnabled[groupIndex + 1] = true;\n//       setIsGroupEnabled(updatedIsGroupEnabled);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 그룹 enable\n//   useEffect(() => {\n//     setIsGroupEnabled(updatedIsGroupEnabled => {\n//       const updated = [...updatedIsGroupEnabled];\n//       updated[0] = true;\n//       return updated;\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updatedOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         return group.options.map(option => ({\n//           value: option,\n//           label: option,\n//           isDisabled: false\n//         }));\n//       } else {\n//         const previousSelectedOption = selectedOptions[index - 1];\n//         if (previousSelectedOption) {\n//           const currentGroupOptions = countList\n//             .filter(item => item.combination[index - 1] === previousSelectedOption.value)\n//             .map(item => ({\n//               value: item.combination[index],\n//               label: `${item.combination[index]} (${item.remainCount} 개 남음)`,\n//               isDisabled: item.remainCount === 0\n//             }));\n//           return currentGroupOptions;\n//         } else {\n//           return [];\n//         }\n//       }\n//     });\n//\n//     // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n//     updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options.map(option => ({\n//       value: option,\n//       label: option,\n//       isDisabled: false\n//     }));\n//\n//     setOptionList(updatedOptionList);\n//   }, [countList, groupList, selectedOptions]);\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={optionList[index]}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={`Select ${group.title}`}\n//             isDisabled={index === 0 ? false : !isGroupEnabled[index]}\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {selectedOptions.map((selectedOption, index) => (\n//         <p key={index}>\n//           {groupList[index].title}: {selectedOption ? selectedOption.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n//\n\nimport React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport groupListData from './groupListData'; // 정적 데이터 파일 import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n  const [optionList, setOptionList] = useState([]);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData.groupList;\n  const countList = groupListData.countList;\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (selectedOption, groupIndex) => {\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[groupIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // 현재 그룹 다음의 그룹을 enable\n    if (groupIndex < groupList.length - 1) {\n      const updatedIsGroupEnabled = [...isGroupEnabled];\n      updatedIsGroupEnabled[groupIndex + 1] = true;\n      setIsGroupEnabled(updatedIsGroupEnabled);\n    }\n  };\n\n  // 초기화 시 첫 번째 그룹 enable\n  useEffect(() => {\n    setIsGroupEnabled(updatedIsGroupEnabled => {\n      const updated = [...updatedIsGroupEnabled];\n      updated[0] = true;\n      return updated;\n    });\n  }, []);\n\n  // 각 셀렉터의 옵션 설정\n  useEffect(() => {\n    const updatedOptionList = groupList.map((group, index) => {\n      if (index === 0) {\n        return group.options.map(option => ({\n          value: option,\n          label: option,\n          isDisabled: false\n        }));\n      } else {\n        const previousSelectedOption = selectedOptions[index - 1];\n        if (previousSelectedOption) {\n          const currentGroupOptions = countList.filter(item => item.combination[index - 1] === previousSelectedOption.value).map(item => {\n            const label = item.remainCount === 0 ? `${item.combination[index]} (품절)` : `${item.combination[index]} (${item.remainCount} 개 남음)`;\n            return {\n              value: item.combination[index],\n              label: label,\n              isDisabled: item.remainCount === 0\n            };\n          });\n          return currentGroupOptions;\n        } else {\n          return [];\n        }\n      }\n    });\n\n    // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n    updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options.map(option => ({\n      value: option,\n      label: option,\n      isDisabled: false\n    }));\n    setOptionList(updatedOptionList);\n  }, [countList, groupList, selectedOptions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [groupList.map((group, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: group.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        options: optionList[index],\n        onChange: selectedOption => handleGroupChange(selectedOption, index),\n        value: selectedOptions[index],\n        placeholder: `Select ${group.title}`,\n        isDisabled: index === 0 ? false : !isGroupEnabled[index]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC120\\uD0DD\\uD55C \\uC635\\uC158:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), selectedOptions.map((selectedOption, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [groupList[index].title, \": \", selectedOption ? selectedOption.label : '-']\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"6SsHdK235oCi7Fun2tf7xZj3Dr0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Select","groupListData","jsxDEV","_jsxDEV","App","_s","selectedOptions","setSelectedOptions","isGroupEnabled","setIsGroupEnabled","Array","groupList","length","fill","optionList","setOptionList","countList","handleGroupChange","selectedOption","groupIndex","updatedOptions","updatedIsGroupEnabled","updated","updatedOptionList","map","group","index","options","option","value","label","isDisabled","previousSelectedOption","currentGroupOptions","filter","item","combination","remainCount","children","title","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","_c","$RefreshReg$"],"sources":["/Users/jiyeong/WebstormProjects/test2/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import Select from 'react-select';\n// import groupListData from './groupListData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState([]);\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//   const countList = groupListData.countList;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = [...selectedOptions];\n//     updatedOptions[groupIndex] = selectedOption;\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 그룹 다음의 그룹을 enable\n//     if (groupIndex < groupList.length - 1) {\n//       const updatedIsGroupEnabled = [...isGroupEnabled];\n//       updatedIsGroupEnabled[groupIndex + 1] = true;\n//       setIsGroupEnabled(updatedIsGroupEnabled);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 그룹 enable\n//   useEffect(() => {\n//     setIsGroupEnabled(updatedIsGroupEnabled => {\n//       const updated = [...updatedIsGroupEnabled];\n//       updated[0] = true;\n//       return updated;\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updatedOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         return group.options.map(option => ({\n//           value: option,\n//           label: option,\n//           isDisabled: false\n//         }));\n//       } else {\n//         const previousSelectedOption = selectedOptions[index - 1];\n//         if (previousSelectedOption) {\n//           const currentGroupOptions = countList\n//             .filter(item => item.combination[index - 1] === previousSelectedOption.value)\n//             .map(item => ({\n//               value: item.combination[index],\n//               label: `${item.combination[index]} (${item.remainCount} 개 남음)`,\n//               isDisabled: item.remainCount === 0\n//             }));\n//           return currentGroupOptions;\n//         } else {\n//           return [];\n//         }\n//       }\n//     });\n//\n//     // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n//     updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options.map(option => ({\n//       value: option,\n//       label: option,\n//       isDisabled: false\n//     }));\n//\n//     setOptionList(updatedOptionList);\n//   }, [countList, groupList, selectedOptions]);\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={optionList[index]}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={`Select ${group.title}`}\n//             isDisabled={index === 0 ? false : !isGroupEnabled[index]}\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {selectedOptions.map((selectedOption, index) => (\n//         <p key={index}>\n//           {groupList[index].title}: {selectedOption ? selectedOption.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n//\n\n\nimport React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport groupListData from './groupListData'; // 정적 데이터 파일 import\n\nconst App = () => {\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n  const [optionList, setOptionList] = useState([]);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData.groupList;\n  const countList = groupListData.countList;\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (selectedOption, groupIndex) => {\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[groupIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // 현재 그룹 다음의 그룹을 enable\n    if (groupIndex < groupList.length - 1) {\n      const updatedIsGroupEnabled = [...isGroupEnabled];\n      updatedIsGroupEnabled[groupIndex + 1] = true;\n      setIsGroupEnabled(updatedIsGroupEnabled);\n    }\n  };\n\n  // 초기화 시 첫 번째 그룹 enable\n  useEffect(() => {\n    setIsGroupEnabled(updatedIsGroupEnabled => {\n      const updated = [...updatedIsGroupEnabled];\n      updated[0] = true;\n      return updated;\n    });\n  }, []);\n\n  // 각 셀렉터의 옵션 설정\n  useEffect(() => {\n    const updatedOptionList = groupList.map((group, index) => {\n      if (index === 0) {\n        return group.options.map(option => ({\n          value: option,\n          label: option,\n          isDisabled: false\n        }));\n      } else {\n        const previousSelectedOption = selectedOptions[index - 1];\n        if (previousSelectedOption) {\n          const currentGroupOptions = countList\n            .filter(item => item.combination[index - 1] === previousSelectedOption.value)\n            .map(item => {\n              const label = item.remainCount === 0 ? `${item.combination[index]} (품절)` : `${item.combination[index]} (${item.remainCount} 개 남음)`;\n              return {\n                value: item.combination[index],\n                label: label,\n                isDisabled: item.remainCount === 0\n              };\n            });\n          return currentGroupOptions;\n        } else {\n          return [];\n        }\n      }\n    });\n\n    // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n    updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options.map(option => ({\n      value: option,\n      label: option,\n      isDisabled: false\n    }));\n\n    setOptionList(updatedOptionList);\n  }, [countList, groupList, selectedOptions]);\n\n  return (\n    <div>\n      {groupList.map((group, index) => (\n        <div key={index}>\n          <h2>{group.title}</h2>\n          <Select\n            options={optionList[index]}\n            onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n            value={selectedOptions[index]}\n            placeholder={`Select ${group.title}`}\n            isDisabled={index === 0 ? false : !isGroupEnabled[index]}\n          />\n        </div>\n      ))}\n      <h2>선택한 옵션:</h2>\n      {selectedOptions.map((selectedOption, index) => (\n        <p key={index}>\n          {groupList[index].title}: {selectedOption ? selectedOption.label : '-'}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/jiyeong/WebstormProjects/test2/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import Select from 'react-select';\n// import groupListData from './optionData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState({});\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(false);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = { ...selectedOptions, [groupIndex]: selectedOption };\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 선택된 그룹 인덱스와 이전 그룹 인덱스를 비교하여 disable 상태 업데이트\n//     if (groupIndex < groupList.length - 1) {\n//       setIsGroupEnabled(true); // 현재 그룹 다음의 그룹을 enable\n//     } else {\n//       setIsGroupEnabled(false); // 마지막 그룹 선택 시 disable\n//     }\n//   };\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={group.options}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={group.placeholder}\n//             isDisabled={index > 0 && !selectedOptions[index - 1]} // 첫 번째 그룹은 항상 enable, 이후 그룹은 이전 그룹이 선택되어야 enable\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {Object.keys(selectedOptions).map((key, index) => (\n//         <p key={index}>\n//           {groupList[key].title}: {selectedOptions[key].label}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n// import React, { useState } from 'react';\n// import Select from 'react-select';\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState({});\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(true); // 첫 번째 그룹은 항상 enable\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupListData = {\n//     countList: [\n//       {\n//         combination: ['스몰', '검정'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['스몰', '하양'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['스몰', '빨강'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['라지', '검정'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['라지', '하양'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['라지', '빨강'],\n//         remainCount: 0,\n//       },\n//     ],\n//     titleList: ['사이즈', '색상'],\n//     groupList: [\n//       { title: '사이즈', options: ['스몰', '라지'] },\n//       { title: '색상', options: ['검정', '하양', '빨강'] },\n//     ],\n//   };\n//\n//   const { groupList, titleList } = groupListData;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = { ...selectedOptions, [groupIndex]: selectedOption };\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 선택된 그룹 인덱스와 이전 그룹 인덱스를 비교하여 disable 상태 업데이트\n//     if (groupIndex < groupList.length - 1) {\n//       setIsGroupEnabled(true); // 현재 그룹 다음의 그룹을 enable\n//     } else {\n//       setIsGroupEnabled(false); // 마지막 그룹 선택 시 disable\n//     }\n//   };\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={group.options.map(option => ({ value: option, label: option }))}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={`Select ${group.title}`}\n//             isDisabled={!isGroupEnabled || (index > 0 && !selectedOptions[index - 1])} // 첫 번째 그룹은 항상 enable, 이후 그룹은 이전 그룹이 선택되어야 enable\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {titleList.map((title, index) => (\n//         <p key={index}>\n//           {title}: {selectedOptions[index]?.value || '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n// import React, { useState } from 'react';\n// import Select from 'react-select';\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState({});\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(true); // 첫 번째 그룹은 항상 enable\n//\n//   // 예시 데이터\n//   const groupListData = {\n//     countList: [\n//       { combination: ['스몰', '검정'], remainCount: 0 },\n//       { combination: ['스몰', '하양'], remainCount: 3 },\n//       { combination: ['스몰', '빨강'], remainCount: 0 },\n//       { combination: ['라지', '검정'], remainCount: 5 },\n//       { combination: ['라지', '하양'], remainCount: 0 },\n//       { combination: ['라지', '빨강'], remainCount: 1 },\n//     ],\n//     titleList: ['사이즈', '색상'],\n//     groupList: [\n//       { title: '사이즈', options: ['스몰', '라지'] },\n//       { title: '색상', options: ['검정', '하양', '빨강'] },\n//     ],\n//   };\n//\n//   const { groupList, titleList, countList } = groupListData;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = { ...selectedOptions, [groupIndex]: selectedOption };\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 선택된 그룹 인덱스와 이전 그룹 인덱스를 비교하여 disable 상태 업데이트\n//     if (groupIndex < groupList.length - 1) {\n//       setIsGroupEnabled(true); // 현재 그룹 다음의 그룹을 enable\n//     } else {\n//       setIsGroupEnabled(false); // 마지막 그룹 선택 시 disable\n//     }\n//   };\n//\n//   // 색상 옵션의 남은 갯수 및 품절 여부 확인 함수\n//   const getOptionLabel = (color) => {\n//     const optionData = countList.find(item => item.combination[1] === color);\n//     if (optionData) {\n//       if (optionData.remainCount === 0) {\n//         return `${color} (품절)`;\n//       } else {\n//         return `${color} (${optionData.remainCount}개 남음)`;\n//       }\n//     }\n//     return color;\n//   };\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={group.options.map(option => ({\n//               value: option,\n//               label: group.title === '색상' ? getOptionLabel(option) : option,\n//               isDisabled: group.title === '색상' && countList.find(item => item.combination[1] === option)?.remainCount === 0\n//             }))}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={`Select ${group.title}`}\n//             isDisabled={!isGroupEnabled || (index > 0 && !selectedOptions[index - 1])} // 첫 번째 그룹은 항상 enable, 이후 그룹은 이전 그룹이 선택되어야 enable\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {titleList.map((title, index) => (\n//         <p key={index}>\n//           {title}: {selectedOptions[index]?.value || '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\nimport React, { useState } from 'react';\nimport Select from 'react-select';\nimport groupListData from './groupListData'; // 정적 데이터 파일 import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedOptions, setSelectedOptions] = useState(Array(groupListData.length).fill(null));\n  const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.length).fill(false));\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData;\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (selectedOption, groupIndex) => {\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[groupIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // 다음 그룹을 enable\n    if (groupIndex < groupList.length - 1) {\n      const updatedIsGroupEnabled = [...isGroupEnabled];\n      updatedIsGroupEnabled[groupIndex + 1] = true;\n      setIsGroupEnabled(updatedIsGroupEnabled);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [groupList.map((group, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: group.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        options: group.options,\n        onChange: selectedOption => handleGroupChange(selectedOption, index),\n        value: selectedOptions[index],\n        placeholder: `Select ${group.title}`,\n        isDisabled: index === 0 ? false : !isGroupEnabled[index]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC120\\uD0DD\\uD55C \\uC635\\uC158:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), selectedOptions.map((selectedOption, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [groupList[index].title, \": \", selectedOption ? selectedOption.label : '-']\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"EVFlgY2Tm6bqpLZlE3f9f+Vyz+A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Select","groupListData","jsxDEV","_jsxDEV","App","_s","selectedOptions","setSelectedOptions","Array","length","fill","isGroupEnabled","setIsGroupEnabled","groupList","handleGroupChange","selectedOption","groupIndex","updatedOptions","updatedIsGroupEnabled","children","map","group","index","title","fileName","_jsxFileName","lineNumber","columnNumber","options","onChange","value","placeholder","isDisabled","label","_c","$RefreshReg$"],"sources":["/Users/jiyeong/WebstormProjects/test2/src/App.js"],"sourcesContent":["\n// import React, { useState } from 'react';\n// import Select from 'react-select';\n// import groupListData from './optionData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState({});\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(false);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = { ...selectedOptions, [groupIndex]: selectedOption };\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 선택된 그룹 인덱스와 이전 그룹 인덱스를 비교하여 disable 상태 업데이트\n//     if (groupIndex < groupList.length - 1) {\n//       setIsGroupEnabled(true); // 현재 그룹 다음의 그룹을 enable\n//     } else {\n//       setIsGroupEnabled(false); // 마지막 그룹 선택 시 disable\n//     }\n//   };\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={group.options}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={group.placeholder}\n//             isDisabled={index > 0 && !selectedOptions[index - 1]} // 첫 번째 그룹은 항상 enable, 이후 그룹은 이전 그룹이 선택되어야 enable\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {Object.keys(selectedOptions).map((key, index) => (\n//         <p key={index}>\n//           {groupList[key].title}: {selectedOptions[key].label}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n\n// import React, { useState } from 'react';\n// import Select from 'react-select';\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState({});\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(true); // 첫 번째 그룹은 항상 enable\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupListData = {\n//     countList: [\n//       {\n//         combination: ['스몰', '검정'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['스몰', '하양'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['스몰', '빨강'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['라지', '검정'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['라지', '하양'],\n//         remainCount: 0,\n//       },\n//       {\n//         combination: ['라지', '빨강'],\n//         remainCount: 0,\n//       },\n//     ],\n//     titleList: ['사이즈', '색상'],\n//     groupList: [\n//       { title: '사이즈', options: ['스몰', '라지'] },\n//       { title: '색상', options: ['검정', '하양', '빨강'] },\n//     ],\n//   };\n//\n//   const { groupList, titleList } = groupListData;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = { ...selectedOptions, [groupIndex]: selectedOption };\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 선택된 그룹 인덱스와 이전 그룹 인덱스를 비교하여 disable 상태 업데이트\n//     if (groupIndex < groupList.length - 1) {\n//       setIsGroupEnabled(true); // 현재 그룹 다음의 그룹을 enable\n//     } else {\n//       setIsGroupEnabled(false); // 마지막 그룹 선택 시 disable\n//     }\n//   };\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={group.options.map(option => ({ value: option, label: option }))}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={`Select ${group.title}`}\n//             isDisabled={!isGroupEnabled || (index > 0 && !selectedOptions[index - 1])} // 첫 번째 그룹은 항상 enable, 이후 그룹은 이전 그룹이 선택되어야 enable\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {titleList.map((title, index) => (\n//         <p key={index}>\n//           {title}: {selectedOptions[index]?.value || '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n\n// import React, { useState } from 'react';\n// import Select from 'react-select';\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState({});\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(true); // 첫 번째 그룹은 항상 enable\n//\n//   // 예시 데이터\n//   const groupListData = {\n//     countList: [\n//       { combination: ['스몰', '검정'], remainCount: 0 },\n//       { combination: ['스몰', '하양'], remainCount: 3 },\n//       { combination: ['스몰', '빨강'], remainCount: 0 },\n//       { combination: ['라지', '검정'], remainCount: 5 },\n//       { combination: ['라지', '하양'], remainCount: 0 },\n//       { combination: ['라지', '빨강'], remainCount: 1 },\n//     ],\n//     titleList: ['사이즈', '색상'],\n//     groupList: [\n//       { title: '사이즈', options: ['스몰', '라지'] },\n//       { title: '색상', options: ['검정', '하양', '빨강'] },\n//     ],\n//   };\n//\n//   const { groupList, titleList, countList } = groupListData;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = { ...selectedOptions, [groupIndex]: selectedOption };\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 선택된 그룹 인덱스와 이전 그룹 인덱스를 비교하여 disable 상태 업데이트\n//     if (groupIndex < groupList.length - 1) {\n//       setIsGroupEnabled(true); // 현재 그룹 다음의 그룹을 enable\n//     } else {\n//       setIsGroupEnabled(false); // 마지막 그룹 선택 시 disable\n//     }\n//   };\n//\n//   // 색상 옵션의 남은 갯수 및 품절 여부 확인 함수\n//   const getOptionLabel = (color) => {\n//     const optionData = countList.find(item => item.combination[1] === color);\n//     if (optionData) {\n//       if (optionData.remainCount === 0) {\n//         return `${color} (품절)`;\n//       } else {\n//         return `${color} (${optionData.remainCount}개 남음)`;\n//       }\n//     }\n//     return color;\n//   };\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={group.options.map(option => ({\n//               value: option,\n//               label: group.title === '색상' ? getOptionLabel(option) : option,\n//               isDisabled: group.title === '색상' && countList.find(item => item.combination[1] === option)?.remainCount === 0\n//             }))}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={`Select ${group.title}`}\n//             isDisabled={!isGroupEnabled || (index > 0 && !selectedOptions[index - 1])} // 첫 번째 그룹은 항상 enable, 이후 그룹은 이전 그룹이 선택되어야 enable\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {titleList.map((title, index) => (\n//         <p key={index}>\n//           {title}: {selectedOptions[index]?.value || '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\nimport React, { useState } from 'react';\nimport Select from 'react-select';\nimport groupListData from './groupListData'; // 정적 데이터 파일 import\n\nconst App = () => {\n  const [selectedOptions, setSelectedOptions] = useState(Array(groupListData.length).fill(null));\n  const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.length).fill(false));\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData;\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (selectedOption, groupIndex) => {\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[groupIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // 다음 그룹을 enable\n    if (groupIndex < groupList.length - 1) {\n      const updatedIsGroupEnabled = [...isGroupEnabled];\n      updatedIsGroupEnabled[groupIndex + 1] = true;\n      setIsGroupEnabled(updatedIsGroupEnabled);\n    }\n  };\n\n  return (\n    <div>\n      {groupList.map((group, index) => (\n        <div key={index}>\n          <h2>{group.title}</h2>\n          <Select\n            options={group.options}\n            onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n            value={selectedOptions[index]}\n            placeholder={`Select ${group.title}`}\n            isDisabled={index === 0 ? false : !isGroupEnabled[index]}\n          />\n        </div>\n      ))}\n      <h2>선택한 옵션:</h2>\n      {selectedOptions.map((selectedOption, index) => (\n        <p key={index}>\n          {groupList[index].title}: {selectedOption ? selectedOption.label : '-'}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappingsvC,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAOC,aAAa,MAAM,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAACS,KAAK,CAACP,aAAa,CAACQ,MAAM,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC9F,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAACS,KAAK,CAACP,aAAa,CAACQ,MAAM,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC;;EAE7F;EACA,MAAMG,SAAS,GAAGZ,aAAa;;EAE/B;EACA,MAAMa,iBAAiB,GAAGA,CAACC,cAAc,EAAEC,UAAU,KAAK;IACxD,MAAMC,cAAc,GAAG,CAAC,GAAGX,eAAe,CAAC;IAC3CW,cAAc,CAACD,UAAU,CAAC,GAAGD,cAAc;IAC3CR,kBAAkB,CAACU,cAAc,CAAC;;IAElC;IACA,IAAID,UAAU,GAAGH,SAAS,CAACJ,MAAM,GAAG,CAAC,EAAE;MACrC,MAAMS,qBAAqB,GAAG,CAAC,GAAGP,cAAc,CAAC;MACjDO,qBAAqB,CAACF,UAAU,GAAG,CAAC,CAAC,GAAG,IAAI;MAC5CJ,iBAAiB,CAACM,qBAAqB,CAAC;IAC1C;EACF,CAAC;EAED,oBACEf,OAAA;IAAAgB,QAAA,GACGN,SAAS,CAACO,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBAC1BnB,OAAA;MAAAgB,QAAA,gBACEhB,OAAA;QAAAgB,QAAA,EAAKE,KAAK,CAACE;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACtBxB,OAAA,CAACH,MAAM;QACL4B,OAAO,EAAEP,KAAK,CAACO,OAAQ;QACvBC,QAAQ,EAAGd,cAAc,IAAKD,iBAAiB,CAACC,cAAc,EAAEO,KAAK,CAAE;QACvEQ,KAAK,EAAExB,eAAe,CAACgB,KAAK,CAAE;QAC9BS,WAAW,EAAG,UAASV,KAAK,CAACE,KAAM,EAAE;QACrCS,UAAU,EAAEV,KAAK,KAAK,CAAC,GAAG,KAAK,GAAG,CAACX,cAAc,CAACW,KAAK;MAAE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1D,CAAC;IAAA,GARML,KAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASV,CACN,CAAC,eACFxB,OAAA;MAAAgB,QAAA,EAAI;IAAO;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACfrB,eAAe,CAACc,GAAG,CAAC,CAACL,cAAc,EAAEO,KAAK,kBACzCnB,OAAA;MAAAgB,QAAA,GACGN,SAAS,CAACS,KAAK,CAAC,CAACC,KAAK,EAAC,IAAE,EAACR,cAAc,GAAGA,cAAc,CAACkB,KAAK,GAAG,GAAG;IAAA,GADhEX,KAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACtB,EAAA,CA3CID,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AA6CT,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
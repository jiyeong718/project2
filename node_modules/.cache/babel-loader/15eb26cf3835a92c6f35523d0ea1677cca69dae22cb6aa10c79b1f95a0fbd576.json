{"ast":null,"code":"var _jsxFileName = \"/Users/jiyeong/WebstormProjects/test2/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import groupListData from './groupListData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState([]);\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//   const countList = groupListData.countList;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (event, groupIndex) => {\n//     const selectedOption = optionList[groupIndex].find(option => option.value === event.target.value);\n//     const updatedOptions = [...selectedOptions];\n//     updatedOptions[groupIndex] = selectedOption;\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 그룹 다음의 그룹을 enable\n//     if (groupIndex < groupList.length - 1) {\n//       const updatedIsGroupEnabled = [...isGroupEnabled];\n//       updatedIsGroupEnabled[groupIndex + 1] = true;\n//       setIsGroupEnabled(updatedIsGroupEnabled);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 그룹 enable\n//   useEffect(() => {\n//     setIsGroupEnabled(updatedIsGroupEnabled => {\n//       const updated = [...updatedIsGroupEnabled];\n//       updated[0] = true;\n//       return updated;\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updatedOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         // 첫 번째 셀렉터의 옵션 설정\n//         return group.options.map(option => {\n//           // 해당 동물과 관련된 모든 과일의 조합을 반복하여 remainCount를 확인\n//           const hasAvailableOption = countList.some(item => item.combination[0] === option && item.remainCount !== 0);\n//           const label = hasAvailableOption ? option : `${option} (품절)`;\n//           return {\n//             value: option,\n//             label: label,\n//             isDisabled: !hasAvailableOption\n//           };\n//         });\n//       } else if (index > 0 && selectedOptions[index - 1]) {\n//         // 이전 셀렉터의 선택 옵션과 현재 그룹의 옵션 조합에 따라 remainCount를 확인하여 품절 여부를 설정\n//         const previousSelectedOption = selectedOptions[index - 1];\n//         return group.options.map(option => {\n//           const hasAvailableOption = countList.some(item =>\n//             item.combination[index - 1] === previousSelectedOption.value &&\n//             item.combination[index] === option &&\n//             item.remainCount !== 0\n//           );\n//           const label = hasAvailableOption ? `${option} (${countList.find(item =>\n//             item.combination[index - 1] === previousSelectedOption.value &&\n//             item.combination[index] === option).remainCount} 개 남음)` : `${option} (품절)`;\n//           return {\n//             value: option,\n//             label: label,\n//             isDisabled: !hasAvailableOption\n//           };\n//         });\n//       } else {\n//         return [];\n//       }\n//     });\n//\n//     setOptionList(updatedOptionList);\n//   }, [countList, groupList, selectedOptions]);\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <select\n//             value={selectedOptions[index] ? selectedOptions[index].value : ''}\n//             onChange={(event) => handleGroupChange(event, index)}\n//             disabled={index === 0 ? false : !isGroupEnabled[index]}\n//           >\n//             <option value=\"\" disabled={true}>{group.title}</option>\n//             {optionList[index]?.map((option, idx) => (\n//               <option key={idx} value={option.value} disabled={option.isDisabled}>\n//                 {option.label}\n//               </option>\n//             ))}\n//           </select>\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {selectedOptions.map((selectedOption, index) => (\n//         <p key={index}>\n//           {groupList[index]?.title}: {selectedOption ? selectedOption.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n//문제. 마지막 셀렉트 품절처리\n// import React, { useState, useEffect } from 'react';\n// import groupListData from './groupListData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState([]);\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//   const countList = groupListData.countList;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (event, groupIndex) => {\n//     const selectedOption = optionList[groupIndex].find(option => option.value === event.target.value);\n//     const updatedOptions = [...selectedOptions];\n//     updatedOptions[groupIndex] = selectedOption;\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 그룹 다음의 그룹을 enable\n//     if (groupIndex < groupList.length - 1) {\n//       const updatedIsGroupEnabled = [...isGroupEnabled];\n//       updatedIsGroupEnabled[groupIndex + 1] = true;\n//       setIsGroupEnabled(updatedIsGroupEnabled);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 그룹 enable\n//   useEffect(() => {\n//     setIsGroupEnabled(updatedIsGroupEnabled => {\n//       const updated = [...updatedIsGroupEnabled];\n//       updated[0] = true;\n//       return updated;\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updatedOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         // 첫 번째 셀렉터의 옵션 설정\n//         return group.options.map(option => {\n//           // 해당 조합의 remainCount가 0이 아닌지 확인하여 품절 여부 설정\n//           const hasAvailableOption = countList.some(item => item.combination[0] === option && item.remainCount !== 0);\n//           const label = hasAvailableOption ? option : `${option} (품절)`;\n//           return {\n//             value: option,\n//             label: label,\n//             isDisabled: !hasAvailableOption\n//           };\n//         });\n//       } else if (index > 0 && selectedOptions[index - 1]) {\n//         // 이전 셀렉터의 선택 옵션과 현재 그룹의 옵션 조합에 따라 remainCount를 확인하여 품절 여부를 설정\n//         const previousSelectedOption = selectedOptions[index - 1];\n//         return group.options.map(option => {\n//           const hasAvailableOption = countList.some(item =>\n//             item.combination[index - 1] === previousSelectedOption.value &&\n//             item.combination[index] === option &&\n//             item.remainCount !== 0\n//           );\n//           const countLabel = countList.find(item =>\n//             item.combination[index - 1] === previousSelectedOption.value &&\n//             item.combination[index] === option)?.remainCount;\n//           const label = hasAvailableOption ? `${option} (${countLabel} 개 남음)` : `${option} (품절)`;\n//           return {\n//             value: option,\n//             label: label,\n//             isDisabled: !hasAvailableOption\n//           };\n//         });\n//       } else {\n//         return [];\n//       }\n//     });\n//\n//     setOptionList(updatedOptionList);\n//   }, [countList, groupList, selectedOptions]);\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <select\n//             value={selectedOptions[index] ? selectedOptions[index].value : ''}\n//             onChange={(event) => handleGroupChange(event, index)}\n//             disabled={index === 0 ? false : !isGroupEnabled[index]}\n//           >\n//             <option value=\"\" disabled={true}>{group.title}</option>\n//             {optionList[index]?.map((option, idx) => (\n//               <option key={idx} value={option.value} disabled={option.isDisabled}>\n//                 {option.label}\n//               </option>\n//             ))}\n//           </select>\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {selectedOptions.map((selectedOption, index) => (\n//         <p key={index}>\n//           {groupList[index]?.title}: {selectedOption ? selectedOption.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport groupListData from './groupListData'; // 정적 데이터 파일 import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n  const [optionList, setOptionList] = useState([]);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData.groupList;\n  const countList = groupListData.countList;\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (event, groupIndex) => {\n    // 현재 셀렉터에서 선택한 옵션\n    const selectedOption = optionList[groupIndex].find(option => option.value === event.target.value);\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[groupIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // 현재 셀렉터 다음의 셀렉터를 enable\n    if (groupIndex < groupList.length - 1) {\n      const updatedIsGroupEnabled = [...isGroupEnabled];\n      updatedIsGroupEnabled[groupIndex + 1] = true;\n      setIsGroupEnabled(updatedIsGroupEnabled);\n    }\n\n    // 다음 셀렉터의 옵션 리스트 업데이트\n    if (groupIndex < groupList.length - 1) {\n      const nextGroupIndex = groupIndex + 1;\n      const updatedOptionList = groupList[nextGroupIndex].options.map(option => {\n        var _countList$find;\n        const hasAvailableOption = countList.some(item => item.combination[groupIndex] === selectedOption.value && item.combination[nextGroupIndex] === option && item.remainCount !== 0);\n        const countLabel = (_countList$find = countList.find(item => item.combination[groupIndex] === selectedOption.value && item.combination[nextGroupIndex] === option)) === null || _countList$find === void 0 ? void 0 : _countList$find.remainCount;\n        const label = hasAvailableOption ? `${option} (${countLabel} 개 남음)` : `${option} (품절)`;\n        return {\n          value: option,\n          label: label,\n          isDisabled: !hasAvailableOption\n        };\n      });\n\n      // 다음 셀렉터의 옵션 리스트 업데이트\n      const updatedOptionListArray = [...optionList];\n      updatedOptionListArray[nextGroupIndex] = updatedOptionList;\n      setOptionList(updatedOptionListArray);\n    }\n  };\n\n  // 초기화 시 첫 번째 그룹 enable\n  useEffect(() => {\n    setIsGroupEnabled(updatedIsGroupEnabled => {\n      const updated = [...updatedIsGroupEnabled];\n      updated[0] = true;\n      return updated;\n    });\n  }, []);\n\n  // 각 셀렉터의 옵션 설정\n  useEffect(() => {\n    const updatedOptionList = groupList.map((group, index) => {\n      if (index === 0) {\n        // 첫 번째 셀렉터의 옵션 설정\n        return group.options.map(option => {\n          const hasAvailableOption = countList.some(item => item.combination[0] === option && item.remainCount !== 0);\n          const label = hasAvailableOption ? option : `${option} (품절)`;\n          return {\n            value: option,\n            label: label,\n            isDisabled: !hasAvailableOption\n          };\n        });\n      } else if (index > 0 && selectedOptions[index - 1]) {\n        // 이전 셀렉터의 선택 옵션과 현재 셀렉터의 옵션 조합에 따라 remainCount를 확인하여 품절 여부를 설정\n        const previousSelectedOption = selectedOptions[index - 1];\n        return group.options.map(option => {\n          var _countList$find2;\n          const hasAvailableOption = countList.some(item => item.combination[index - 1] === previousSelectedOption.value && item.combination[index] === option && item.remainCount !== 0);\n          const countLabel = (_countList$find2 = countList.find(item => item.combination[index - 1] === previousSelectedOption.value && item.combination[index] === option)) === null || _countList$find2 === void 0 ? void 0 : _countList$find2.remainCount;\n          const label = hasAvailableOption ? `${option} (${countLabel} 개 남음)` : `${option} (품절)`;\n          return {\n            value: option,\n            label: label,\n            isDisabled: !hasAvailableOption\n          };\n        });\n      } else {\n        return [];\n      }\n    });\n    setOptionList(updatedOptionList);\n  }, [countList, groupList, selectedOptions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [groupList.map((group, index) => {\n      var _optionList$index;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: group.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedOptions[index] ? selectedOptions[index].value : '',\n          onChange: event => handleGroupChange(event, index),\n          disabled: index === 0 ? false : !isGroupEnabled[index],\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: group.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 13\n          }, this), (_optionList$index = optionList[index]) === null || _optionList$index === void 0 ? void 0 : _optionList$index.map((option, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: option.value,\n            disabled: option.isDisabled,\n            children: option.label\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC120\\uD0DD\\uD55C \\uC635\\uC158:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this), selectedOptions.map((selectedOption, index) => {\n      var _groupList$index;\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [(_groupList$index = groupList[index]) === null || _groupList$index === void 0 ? void 0 : _groupList$index.title, \": \", selectedOption ? selectedOption.label : '-']\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 327,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"6SsHdK235oCi7Fun2tf7xZj3Dr0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","groupListData","jsxDEV","_jsxDEV","App","_s","selectedOptions","setSelectedOptions","isGroupEnabled","setIsGroupEnabled","Array","groupList","length","fill","optionList","setOptionList","countList","handleGroupChange","event","groupIndex","selectedOption","find","option","value","target","updatedOptions","updatedIsGroupEnabled","nextGroupIndex","updatedOptionList","options","map","_countList$find","hasAvailableOption","some","item","combination","remainCount","countLabel","label","isDisabled","updatedOptionListArray","updated","group","index","previousSelectedOption","_countList$find2","children","_optionList$index","title","fileName","_jsxFileName","lineNumber","columnNumber","onChange","disabled","idx","_groupList$index","_c","$RefreshReg$"],"sources":["/Users/jiyeong/WebstormProjects/test2/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import groupListData from './groupListData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState([]);\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//   const countList = groupListData.countList;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (event, groupIndex) => {\n//     const selectedOption = optionList[groupIndex].find(option => option.value === event.target.value);\n//     const updatedOptions = [...selectedOptions];\n//     updatedOptions[groupIndex] = selectedOption;\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 그룹 다음의 그룹을 enable\n//     if (groupIndex < groupList.length - 1) {\n//       const updatedIsGroupEnabled = [...isGroupEnabled];\n//       updatedIsGroupEnabled[groupIndex + 1] = true;\n//       setIsGroupEnabled(updatedIsGroupEnabled);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 그룹 enable\n//   useEffect(() => {\n//     setIsGroupEnabled(updatedIsGroupEnabled => {\n//       const updated = [...updatedIsGroupEnabled];\n//       updated[0] = true;\n//       return updated;\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updatedOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         // 첫 번째 셀렉터의 옵션 설정\n//         return group.options.map(option => {\n//           // 해당 동물과 관련된 모든 과일의 조합을 반복하여 remainCount를 확인\n//           const hasAvailableOption = countList.some(item => item.combination[0] === option && item.remainCount !== 0);\n//           const label = hasAvailableOption ? option : `${option} (품절)`;\n//           return {\n//             value: option,\n//             label: label,\n//             isDisabled: !hasAvailableOption\n//           };\n//         });\n//       } else if (index > 0 && selectedOptions[index - 1]) {\n//         // 이전 셀렉터의 선택 옵션과 현재 그룹의 옵션 조합에 따라 remainCount를 확인하여 품절 여부를 설정\n//         const previousSelectedOption = selectedOptions[index - 1];\n//         return group.options.map(option => {\n//           const hasAvailableOption = countList.some(item =>\n//             item.combination[index - 1] === previousSelectedOption.value &&\n//             item.combination[index] === option &&\n//             item.remainCount !== 0\n//           );\n//           const label = hasAvailableOption ? `${option} (${countList.find(item =>\n//             item.combination[index - 1] === previousSelectedOption.value &&\n//             item.combination[index] === option).remainCount} 개 남음)` : `${option} (품절)`;\n//           return {\n//             value: option,\n//             label: label,\n//             isDisabled: !hasAvailableOption\n//           };\n//         });\n//       } else {\n//         return [];\n//       }\n//     });\n//\n//     setOptionList(updatedOptionList);\n//   }, [countList, groupList, selectedOptions]);\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <select\n//             value={selectedOptions[index] ? selectedOptions[index].value : ''}\n//             onChange={(event) => handleGroupChange(event, index)}\n//             disabled={index === 0 ? false : !isGroupEnabled[index]}\n//           >\n//             <option value=\"\" disabled={true}>{group.title}</option>\n//             {optionList[index]?.map((option, idx) => (\n//               <option key={idx} value={option.value} disabled={option.isDisabled}>\n//                 {option.label}\n//               </option>\n//             ))}\n//           </select>\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {selectedOptions.map((selectedOption, index) => (\n//         <p key={index}>\n//           {groupList[index]?.title}: {selectedOption ? selectedOption.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n//문제. 마지막 셀렉트 품절처리\n// import React, { useState, useEffect } from 'react';\n// import groupListData from './groupListData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState([]);\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//   const countList = groupListData.countList;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (event, groupIndex) => {\n//     const selectedOption = optionList[groupIndex].find(option => option.value === event.target.value);\n//     const updatedOptions = [...selectedOptions];\n//     updatedOptions[groupIndex] = selectedOption;\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 그룹 다음의 그룹을 enable\n//     if (groupIndex < groupList.length - 1) {\n//       const updatedIsGroupEnabled = [...isGroupEnabled];\n//       updatedIsGroupEnabled[groupIndex + 1] = true;\n//       setIsGroupEnabled(updatedIsGroupEnabled);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 그룹 enable\n//   useEffect(() => {\n//     setIsGroupEnabled(updatedIsGroupEnabled => {\n//       const updated = [...updatedIsGroupEnabled];\n//       updated[0] = true;\n//       return updated;\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updatedOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         // 첫 번째 셀렉터의 옵션 설정\n//         return group.options.map(option => {\n//           // 해당 조합의 remainCount가 0이 아닌지 확인하여 품절 여부 설정\n//           const hasAvailableOption = countList.some(item => item.combination[0] === option && item.remainCount !== 0);\n//           const label = hasAvailableOption ? option : `${option} (품절)`;\n//           return {\n//             value: option,\n//             label: label,\n//             isDisabled: !hasAvailableOption\n//           };\n//         });\n//       } else if (index > 0 && selectedOptions[index - 1]) {\n//         // 이전 셀렉터의 선택 옵션과 현재 그룹의 옵션 조합에 따라 remainCount를 확인하여 품절 여부를 설정\n//         const previousSelectedOption = selectedOptions[index - 1];\n//         return group.options.map(option => {\n//           const hasAvailableOption = countList.some(item =>\n//             item.combination[index - 1] === previousSelectedOption.value &&\n//             item.combination[index] === option &&\n//             item.remainCount !== 0\n//           );\n//           const countLabel = countList.find(item =>\n//             item.combination[index - 1] === previousSelectedOption.value &&\n//             item.combination[index] === option)?.remainCount;\n//           const label = hasAvailableOption ? `${option} (${countLabel} 개 남음)` : `${option} (품절)`;\n//           return {\n//             value: option,\n//             label: label,\n//             isDisabled: !hasAvailableOption\n//           };\n//         });\n//       } else {\n//         return [];\n//       }\n//     });\n//\n//     setOptionList(updatedOptionList);\n//   }, [countList, groupList, selectedOptions]);\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <select\n//             value={selectedOptions[index] ? selectedOptions[index].value : ''}\n//             onChange={(event) => handleGroupChange(event, index)}\n//             disabled={index === 0 ? false : !isGroupEnabled[index]}\n//           >\n//             <option value=\"\" disabled={true}>{group.title}</option>\n//             {optionList[index]?.map((option, idx) => (\n//               <option key={idx} value={option.value} disabled={option.isDisabled}>\n//                 {option.label}\n//               </option>\n//             ))}\n//           </select>\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {selectedOptions.map((selectedOption, index) => (\n//         <p key={index}>\n//           {groupList[index]?.title}: {selectedOption ? selectedOption.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport groupListData from './groupListData'; // 정적 데이터 파일 import\n\nconst App = () => {\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n  const [optionList, setOptionList] = useState([]);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData.groupList;\n  const countList = groupListData.countList;\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (event, groupIndex) => {\n    // 현재 셀렉터에서 선택한 옵션\n    const selectedOption = optionList[groupIndex].find(option => option.value === event.target.value);\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[groupIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // 현재 셀렉터 다음의 셀렉터를 enable\n    if (groupIndex < groupList.length - 1) {\n      const updatedIsGroupEnabled = [...isGroupEnabled];\n      updatedIsGroupEnabled[groupIndex + 1] = true;\n      setIsGroupEnabled(updatedIsGroupEnabled);\n    }\n\n    // 다음 셀렉터의 옵션 리스트 업데이트\n    if (groupIndex < groupList.length - 1) {\n      const nextGroupIndex = groupIndex + 1;\n      const updatedOptionList = groupList[nextGroupIndex].options.map(option => {\n        const hasAvailableOption = countList.some(item =>\n          item.combination[groupIndex] === selectedOption.value &&\n          item.combination[nextGroupIndex] === option &&\n          item.remainCount !== 0\n        );\n        const countLabel = countList.find(item =>\n          item.combination[groupIndex] === selectedOption.value &&\n          item.combination[nextGroupIndex] === option)?.remainCount;\n        const label = hasAvailableOption ? `${option} (${countLabel} 개 남음)` : `${option} (품절)`;\n        return {\n          value: option,\n          label: label,\n          isDisabled: !hasAvailableOption\n        };\n      });\n\n      // 다음 셀렉터의 옵션 리스트 업데이트\n      const updatedOptionListArray = [...optionList];\n      updatedOptionListArray[nextGroupIndex] = updatedOptionList;\n      setOptionList(updatedOptionListArray);\n    }\n  };\n\n\n\n  // 초기화 시 첫 번째 그룹 enable\n  useEffect(() => {\n    setIsGroupEnabled(updatedIsGroupEnabled => {\n      const updated = [...updatedIsGroupEnabled];\n      updated[0] = true;\n      return updated;\n    });\n  }, []);\n\n  // 각 셀렉터의 옵션 설정\n  useEffect(() => {\n    const updatedOptionList = groupList.map((group, index) => {\n      if (index === 0) {\n        // 첫 번째 셀렉터의 옵션 설정\n        return group.options.map(option => {\n          const hasAvailableOption = countList.some(item => item.combination[0] === option && item.remainCount !== 0);\n          const label = hasAvailableOption ? option : `${option} (품절)`;\n          return {\n            value: option,\n            label: label,\n            isDisabled: !hasAvailableOption\n          };\n        });\n      } else if (index > 0 && selectedOptions[index - 1]) {\n        // 이전 셀렉터의 선택 옵션과 현재 셀렉터의 옵션 조합에 따라 remainCount를 확인하여 품절 여부를 설정\n        const previousSelectedOption = selectedOptions[index - 1];\n        return group.options.map(option => {\n          const hasAvailableOption = countList.some(item =>\n            item.combination[index - 1] === previousSelectedOption.value &&\n            item.combination[index] === option &&\n            item.remainCount !== 0\n          );\n          const countLabel = countList.find(item =>\n            item.combination[index - 1] === previousSelectedOption.value &&\n            item.combination[index] === option)?.remainCount;\n          const label = hasAvailableOption ? `${option} (${countLabel} 개 남음)` : `${option} (품절)`;\n          return {\n            value: option,\n            label: label,\n            isDisabled: !hasAvailableOption\n          };\n        });\n      } else {\n        return [];\n      }\n    });\n\n    setOptionList(updatedOptionList);\n  }, [countList, groupList, selectedOptions]);\n\n\n  return (\n    <div>\n      {groupList.map((group, index) => (\n        <div key={index}>\n          <h2>{group.title}</h2>\n          <select\n            value={selectedOptions[index] ? selectedOptions[index].value : ''}\n            onChange={(event) => handleGroupChange(event, index)}\n            disabled={index === 0 ? false : !isGroupEnabled[index]}\n          >\n            <option value=\"\" disabled={true}>{group.title}</option>\n            {optionList[index]?.map((option, idx) => (\n              <option key={idx} value={option.value} disabled={option.isDisabled}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n      ))}\n      <h2>선택한 옵션:</h2>\n      {selectedOptions.map((selectedOption, index) => (\n        <p key={index}>\n          {groupList[index]?.title}: {selectedOption ? selectedOption.label : '-'}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
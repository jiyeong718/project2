{"ast":null,"code":"var _jsxFileName = \"/Users/jiyeong/WebstormProjects/test2/src/App.js\",\n  _s = $RefreshSig$();\n// 첫번째 셀렉터에도 적용이 안됨.\n// import React, { useState, useEffect } from 'react';\n// import Select from 'react-select';\n// import groupListData from './groupListData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState([]);\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//   const countList = groupListData.countList;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = [...selectedOptions];\n//     updatedOptions[groupIndex] = selectedOption;\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 그룹 다음의 그룹을 enable\n//     if (groupIndex < groupList.length - 1) {\n//       const updatedIsGroupEnabled = [...isGroupEnabled];\n//       updatedIsGroupEnabled[groupIndex + 1] = true;\n//       setIsGroupEnabled(updatedIsGroupEnabled);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 그룹 enable\n//   useEffect(() => {\n//     setIsGroupEnabled(updatedIsGroupEnabled => {\n//       const updated = [...updatedIsGroupEnabled];\n//       updated[0] = true;\n//       return updated;\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updatedOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         return group.options.map(option => ({\n//           value: option,\n//           label: option,\n//           isDisabled: false\n//         }));\n//       } else {\n//         const previousSelectedOption = selectedOptions[index - 1];\n//         if (previousSelectedOption) {\n//           // 중복된 조합을 필터링하여 하나의 옵션으로만 표시\n//           const currentGroupOptions = [];\n//           const seen = new Set();\n//           countList.forEach(item => {\n//             if (item.combination[index] && item.combination[index - 1] === previousSelectedOption.value && !seen.has(item.combination[index])) {\n//               const label = item.remainCount === 0 ? `${item.combination[index]} (품절)` : `${item.combination[index]} (${item.remainCount} 개 남음)`;\n//               currentGroupOptions.push({\n//                 value: item.combination[index],\n//                 label: label,\n//                 isDisabled: item.remainCount === 0\n//               });\n//               seen.add(item.combination[index]);\n//             }\n//           });\n//           return currentGroupOptions;\n//         } else {\n//           return [];\n//         }\n//       }\n//     });\n//\n//     // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n//     updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options.map(option => ({\n//       value: option,\n//       label: option,\n//       isDisabled: false\n//     }));\n//\n//     setOptionList(updatedOptionList);\n//   }, [countList, groupList, selectedOptions]);\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={optionList[index]}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={group.title}\n//             isDisabled={index === 0 ? false : !isGroupEnabled[index]}\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {selectedOptions.map((selectedOption, index) => (\n//         <p key={index}>\n//           {groupList[index].title}: {selectedOption ? selectedOption.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n// 첫번째 셀렉터에는 적용이 된 상태.\n// import React, { useState, useEffect } from 'react';\n// import Select from 'react-select';\n// import groupListData from './groupListData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState([]);\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//   const countList = groupListData.countList;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = [...selectedOptions];\n//     updatedOptions[groupIndex] = selectedOption;\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 그룹 다음의 그룹을 enable\n//     if (groupIndex < groupList.length - 1) {\n//       const updatedIsGroupEnabled = [...isGroupEnabled];\n//       updatedIsGroupEnabled[groupIndex + 1] = true;\n//       setIsGroupEnabled(updatedIsGroupEnabled);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 그룹만 enable\n//   useEffect(() => {\n//     setIsGroupEnabled(updatedIsGroupEnabled => {\n//       const updated = [...updatedIsGroupEnabled];\n//       updated[0] = true;\n//       return updated;\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updatedOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         return [{\n//           value: group.title,\n//           label: group.title,\n//           isDisabled: true // 처음에는 선택할 수 없도록 disable 처리\n//         }, ...group.options.map(option => ({\n//           value: option,\n//           label: option,\n//           isDisabled: false\n//         }))];\n//       } else {\n//         const previousSelectedOption = selectedOptions[index - 1];\n//         if (previousSelectedOption) {\n//           // 중복된 조합을 필터링하여 하나의 옵션으로만 표시\n//           const currentGroupOptions = [];\n//           const seen = new Set();\n//           countList.forEach(item => {\n//             if (item.combination[index] && item.combination[index - 1] === previousSelectedOption.value && !seen.has(item.combination[index])) {\n//               const label = item.remainCount === 0 ? `${item.combination[index]} (품절)` : `${item.combination[index]} (${item.remainCount} 개 남음)`;\n//               currentGroupOptions.push({\n//                 value: item.combination[index],\n//                 label: label,\n//                 isDisabled: item.remainCount === 0\n//               });\n//               seen.add(item.combination[index]);\n//             }\n//           });\n//           return currentGroupOptions;\n//         } else {\n//           return [];\n//         }\n//       }\n//     });\n//\n//     // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n//     updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options.map(option => ({\n//       value: option,\n//       label: option,\n//       isDisabled: false\n//     }));\n//\n//     setOptionList(updatedOptionList);\n//   }, [countList, groupList, selectedOptions]);\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={optionList[index]}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={group.title}\n//             isDisabled={index === 0 ? false : !isGroupEnabled[index]} // 첫 번째 셀렉터는 선택할 수 없도록 처리\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {selectedOptions.map((selectedOption, index) => (\n//         <p key={index}>\n//           {groupList[index].title}: {selectedOption ? selectedOption.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n//순수리엑트로만 셀렉트 박스 만들기\nimport React, { useState, useEffect } from 'react';\nimport groupListData from './groupListData'; // 정적 데이터 파일 import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n  const [optionList, setOptionList] = useState([]);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData.groupList;\n  const countList = groupListData.countList;\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (event, groupIndex) => {\n    const selectedOption = event.target.value;\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[groupIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // 현재 그룹 다음의 그룹을 enable\n    if (groupIndex < groupList.length - 1) {\n      const updatedIsGroupEnabled = [...isGroupEnabled];\n      updatedIsGroupEnabled[groupIndex + 1] = true;\n      setIsGroupEnabled(updatedIsGroupEnabled);\n    }\n  };\n\n  // 초기화 시 첫 번째 그룹만 enable\n  useEffect(() => {\n    setIsGroupEnabled(updatedIsGroupEnabled => {\n      const updated = [...updatedIsGroupEnabled];\n      updated[0] = true;\n      return updated;\n    });\n  }, []);\n\n  // 각 셀렉터의 옵션 설정\n  useEffect(() => {\n    const updatedOptionList = groupList.map((group, index) => {\n      if (index === 0) {\n        return [group.title, ...group.options];\n      } else {\n        const previousSelectedOption = selectedOptions[index - 1];\n        if (previousSelectedOption) {\n          // 중복된 조합을 필터링하여 하나의 옵션으로만 표시\n          const currentGroupOptions = [];\n          const seen = new Set();\n          countList.forEach(item => {\n            if (item.combination[index] && item.combination[index - 1] === previousSelectedOption && !seen.has(item.combination[index])) {\n              const label = item.remainCount === 0 ? `${item.combination[index]} (품절)` : `${item.combination[index]} (${item.remainCount} 개 남음)`;\n              currentGroupOptions.push(label);\n              seen.add(item.combination[index]);\n            }\n          });\n          return currentGroupOptions;\n        } else {\n          return [];\n        }\n      }\n    });\n\n    // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n    updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options;\n    setOptionList(updatedOptionList);\n  }, [countList, groupList, selectedOptions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [groupList.map((group, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: group.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedOptions[index] || '',\n        onChange: event => handleGroupChange(event, index),\n        disabled: index === 0 ? false : !isGroupEnabled[index],\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: group.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this), optionList[index].map((option, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option,\n          disabled: false,\n          children: option\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC120\\uD0DD\\uD55C \\uC635\\uC158:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), selectedOptions.map((selectedOption, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [groupList[index].title, \": \", selectedOption ? selectedOption : '-']\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"6SsHdK235oCi7Fun2tf7xZj3Dr0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","groupListData","jsxDEV","_jsxDEV","App","_s","selectedOptions","setSelectedOptions","isGroupEnabled","setIsGroupEnabled","Array","groupList","length","fill","optionList","setOptionList","countList","handleGroupChange","event","groupIndex","selectedOption","target","value","updatedOptions","updatedIsGroupEnabled","updated","updatedOptionList","map","group","index","title","options","previousSelectedOption","currentGroupOptions","seen","Set","forEach","item","combination","has","label","remainCount","push","add","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","disabled","option","idx","_c","$RefreshReg$"],"sources":["/Users/jiyeong/WebstormProjects/test2/src/App.js"],"sourcesContent":["// 첫번째 셀렉터에도 적용이 안됨.\n// import React, { useState, useEffect } from 'react';\n// import Select from 'react-select';\n// import groupListData from './groupListData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState([]);\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//   const countList = groupListData.countList;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = [...selectedOptions];\n//     updatedOptions[groupIndex] = selectedOption;\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 그룹 다음의 그룹을 enable\n//     if (groupIndex < groupList.length - 1) {\n//       const updatedIsGroupEnabled = [...isGroupEnabled];\n//       updatedIsGroupEnabled[groupIndex + 1] = true;\n//       setIsGroupEnabled(updatedIsGroupEnabled);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 그룹 enable\n//   useEffect(() => {\n//     setIsGroupEnabled(updatedIsGroupEnabled => {\n//       const updated = [...updatedIsGroupEnabled];\n//       updated[0] = true;\n//       return updated;\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updatedOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         return group.options.map(option => ({\n//           value: option,\n//           label: option,\n//           isDisabled: false\n//         }));\n//       } else {\n//         const previousSelectedOption = selectedOptions[index - 1];\n//         if (previousSelectedOption) {\n//           // 중복된 조합을 필터링하여 하나의 옵션으로만 표시\n//           const currentGroupOptions = [];\n//           const seen = new Set();\n//           countList.forEach(item => {\n//             if (item.combination[index] && item.combination[index - 1] === previousSelectedOption.value && !seen.has(item.combination[index])) {\n//               const label = item.remainCount === 0 ? `${item.combination[index]} (품절)` : `${item.combination[index]} (${item.remainCount} 개 남음)`;\n//               currentGroupOptions.push({\n//                 value: item.combination[index],\n//                 label: label,\n//                 isDisabled: item.remainCount === 0\n//               });\n//               seen.add(item.combination[index]);\n//             }\n//           });\n//           return currentGroupOptions;\n//         } else {\n//           return [];\n//         }\n//       }\n//     });\n//\n//     // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n//     updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options.map(option => ({\n//       value: option,\n//       label: option,\n//       isDisabled: false\n//     }));\n//\n//     setOptionList(updatedOptionList);\n//   }, [countList, groupList, selectedOptions]);\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={optionList[index]}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={group.title}\n//             isDisabled={index === 0 ? false : !isGroupEnabled[index]}\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {selectedOptions.map((selectedOption, index) => (\n//         <p key={index}>\n//           {groupList[index].title}: {selectedOption ? selectedOption.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n\n\n\n// 첫번째 셀렉터에는 적용이 된 상태.\n// import React, { useState, useEffect } from 'react';\n// import Select from 'react-select';\n// import groupListData from './groupListData'; // 정적 데이터 파일 import\n//\n// const App = () => {\n//   const [selectedOptions, setSelectedOptions] = useState([]);\n//   const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//   const countList = groupListData.countList;\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (selectedOption, groupIndex) => {\n//     const updatedOptions = [...selectedOptions];\n//     updatedOptions[groupIndex] = selectedOption;\n//     setSelectedOptions(updatedOptions);\n//\n//     // 현재 그룹 다음의 그룹을 enable\n//     if (groupIndex < groupList.length - 1) {\n//       const updatedIsGroupEnabled = [...isGroupEnabled];\n//       updatedIsGroupEnabled[groupIndex + 1] = true;\n//       setIsGroupEnabled(updatedIsGroupEnabled);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 그룹만 enable\n//   useEffect(() => {\n//     setIsGroupEnabled(updatedIsGroupEnabled => {\n//       const updated = [...updatedIsGroupEnabled];\n//       updated[0] = true;\n//       return updated;\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updatedOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         return [{\n//           value: group.title,\n//           label: group.title,\n//           isDisabled: true // 처음에는 선택할 수 없도록 disable 처리\n//         }, ...group.options.map(option => ({\n//           value: option,\n//           label: option,\n//           isDisabled: false\n//         }))];\n//       } else {\n//         const previousSelectedOption = selectedOptions[index - 1];\n//         if (previousSelectedOption) {\n//           // 중복된 조합을 필터링하여 하나의 옵션으로만 표시\n//           const currentGroupOptions = [];\n//           const seen = new Set();\n//           countList.forEach(item => {\n//             if (item.combination[index] && item.combination[index - 1] === previousSelectedOption.value && !seen.has(item.combination[index])) {\n//               const label = item.remainCount === 0 ? `${item.combination[index]} (품절)` : `${item.combination[index]} (${item.remainCount} 개 남음)`;\n//               currentGroupOptions.push({\n//                 value: item.combination[index],\n//                 label: label,\n//                 isDisabled: item.remainCount === 0\n//               });\n//               seen.add(item.combination[index]);\n//             }\n//           });\n//           return currentGroupOptions;\n//         } else {\n//           return [];\n//         }\n//       }\n//     });\n//\n//     // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n//     updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options.map(option => ({\n//       value: option,\n//       label: option,\n//       isDisabled: false\n//     }));\n//\n//     setOptionList(updatedOptionList);\n//   }, [countList, groupList, selectedOptions]);\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <Select\n//             options={optionList[index]}\n//             onChange={(selectedOption) => handleGroupChange(selectedOption, index)}\n//             value={selectedOptions[index]}\n//             placeholder={group.title}\n//             isDisabled={index === 0 ? false : !isGroupEnabled[index]} // 첫 번째 셀렉터는 선택할 수 없도록 처리\n//           />\n//         </div>\n//       ))}\n//       <h2>선택한 옵션:</h2>\n//       {selectedOptions.map((selectedOption, index) => (\n//         <p key={index}>\n//           {groupList[index].title}: {selectedOption ? selectedOption.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n//순수리엑트로만 셀렉트 박스 만들기\nimport React, { useState, useEffect } from 'react';\nimport groupListData from './groupListData'; // 정적 데이터 파일 import\n\nconst App = () => {\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [isGroupEnabled, setIsGroupEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n  const [optionList, setOptionList] = useState([]);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData.groupList;\n  const countList = groupListData.countList;\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (event, groupIndex) => {\n    const selectedOption = event.target.value;\n    const updatedOptions = [...selectedOptions];\n    updatedOptions[groupIndex] = selectedOption;\n    setSelectedOptions(updatedOptions);\n\n    // 현재 그룹 다음의 그룹을 enable\n    if (groupIndex < groupList.length - 1) {\n      const updatedIsGroupEnabled = [...isGroupEnabled];\n      updatedIsGroupEnabled[groupIndex + 1] = true;\n      setIsGroupEnabled(updatedIsGroupEnabled);\n    }\n  };\n\n  // 초기화 시 첫 번째 그룹만 enable\n  useEffect(() => {\n    setIsGroupEnabled(updatedIsGroupEnabled => {\n      const updated = [...updatedIsGroupEnabled];\n      updated[0] = true;\n      return updated;\n    });\n  }, []);\n\n  // 각 셀렉터의 옵션 설정\n  useEffect(() => {\n    const updatedOptionList = groupList.map((group, index) => {\n      if (index === 0) {\n        return [group.title, ...group.options];\n      } else {\n        const previousSelectedOption = selectedOptions[index - 1];\n        if (previousSelectedOption) {\n          // 중복된 조합을 필터링하여 하나의 옵션으로만 표시\n          const currentGroupOptions = [];\n          const seen = new Set();\n          countList.forEach(item => {\n            if (item.combination[index] && item.combination[index - 1] === previousSelectedOption && !seen.has(item.combination[index])) {\n              const label = item.remainCount === 0 ? `${item.combination[index]} (품절)` : `${item.combination[index]} (${item.remainCount} 개 남음)`;\n              currentGroupOptions.push(label);\n              seen.add(item.combination[index]);\n            }\n          });\n          return currentGroupOptions;\n        } else {\n          return [];\n        }\n      }\n    });\n\n    // 마지막 셀렉터의 모든 옵션을 선택 가능하도록 설정\n    updatedOptionList[groupList.length - 1] = groupList[groupList.length - 1].options;\n\n    setOptionList(updatedOptionList);\n  }, [countList, groupList, selectedOptions]);\n\n  return (\n    <div>\n      {groupList.map((group, index) => (\n        <div key={index}>\n          <h2>{group.title}</h2>\n          <select\n            value={selectedOptions[index] || ''}\n            onChange={(event) => handleGroupChange(event, index)}\n            disabled={index === 0 ? false : !isGroupEnabled[index]}\n          >\n            <option value=\"\" disabled={true}>{group.title}</option>\n            {optionList[index].map((option, idx) => (\n              <option key={idx} value={option} disabled={false}>{option}</option>\n            ))}\n          </select>\n        </div>\n      ))}\n      <h2>선택한 옵션:</h2>\n      {selectedOptions.map((selectedOption, index) => (\n        <p key={index}>\n          {groupList[index].title}: {selectedOption ? selectedOption : '-'}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
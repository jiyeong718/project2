{"ast":null,"code":"var _jsxFileName = \"/Users/jiyeong/WebstormProjects/test2/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import groupListData from './groupListData';\n//\n// const App = () => {\n//   const [selecteOptions, setSelecteOptions] = useState([]);\n//   const [isEnabled, setIsEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//   const countList = groupListData.countList;\n//\n//   // 함수: 선택 가능한 옵션과 라벨 생성\n//   const getOptionList = (index, update) => {\n//     const nextIndex = index + 1;\n//     const updateList = groupList[nextIndex].options.map(option => {\n//       const availableOption = countList.some(item => {\n//         let available = true;\n//         for (let i = 0; i <= index; i++) {\n//           if (update[i]) {\n//             if (item.combination[i] !== update[i].value) {\n//               available = false;\n//               break;\n//             }\n//           } else {\n//             available = false;\n//             break;\n//           }\n//         }\n//         return available && item.combination[nextIndex] === option && item.remainCount !== 0;\n//       });\n//\n//       const countLabel = countList.find(item => {\n//         let match = true;\n//         for (let i = 0; i <= index; i++) {\n//           if (update[i]) {\n//             if (item.combination[i] !== update[i].value) {\n//               match = false;\n//               break;\n//             }\n//           } else {\n//             match = false;\n//             break;\n//           }\n//         }\n//         return match && item.combination[nextIndex] === option;\n//       })?.remainCount;\n//\n//        const label = availableOption ? `${option} (${countLabel} 개 남음)` : `${option} (품절)`;\n//        return {\n//         value: option,\n//         label: label,\n//         isDisabled: !availableOption\n//       };\n//     });\n//\n//     return updateList;\n//   };\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (event, index) => {\n//     // 현재 셀렉터에서 선택한 옵션\n//     const selectedOption = optionList[index].find(option => option.value === event.target.value);\n//\n//     // 옵션 배열을 복사하여 업데이트\n//     const updateOptions = selecteOptions.slice();\n//     updateOptions[index] = selectedOption;\n//     setSelecteOptions(updateOptions);\n//\n//     // 현재 셀렉터 다음의 셀렉터를 enable\n//     if (index < groupList.length - 1) {\n//       const updatedIsEnabled = isEnabled.slice(); // isEnabled 배열 복사\n//       updatedIsEnabled[index + 1] = true;\n//       setIsEnabled(updatedIsEnabled);\n//     }\n//\n//     // 다음 셀렉터의 옵션 리스트 업데이트\n//     if (index < groupList.length - 1) {\n//       const updateOptionList = getOptionList(index, updateOptions);\n//\n//       // optionList 배열 복사\n//       const listArray = optionList.slice();\n//       listArray[index + 1] = updateOptionList;\n//       setOptionList(listArray);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 셀렉털를 enable\n//   useEffect(() => {\n//     setIsEnabled(updateIsEnabled => {\n//       return updateIsEnabled.map((value, index) => {\n//         return index === 0 ? true : value;\n//       });\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updateOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         // 첫 번째 셀렉터의 옵션 설정\n//         return group.options.map(option => {\n//           const availableOption = countList.some(item => item.combination[0] === option && item.remainCount !== 0);\n//           const label = availableOption ? option : `${option} (품절)`;\n//           return {\n//             value: option,\n//             label: label,\n//             isDisabled: !availableOption\n//           };\n//         });\n//       } else if (index > 0 && selecteOptions[index - 1]) {\n//         // 이전 셀렉터의 선택 옵션과 현재 셀렉터의 옵션 조합에 따라 remainCount를 확인하여 품절 여부를 설정\n//         const prevSelecteOption = selecteOptions[index - 1];\n//         return group.options.map(option => {\n//           const availableOption = countList.some(item =>\n//             item.combination[index - 1] === prevSelecteOption.value &&\n//             item.combination[index] === option &&\n//             item.remainCount !== 0\n//           );\n//           const countLabel = countList.find(item =>\n//             item.combination[index - 1] === prevSelecteOption.value &&\n//             item.combination[index] === option)?.remainCount;\n//           const label = availableOption ? `${option} (${countLabel} 개 남음)` : `${option} (품절)`;\n//           return {\n//             value: option,\n//             label: label,\n//             isDisabled: !availableOption\n//           };\n//         });\n//       } else {\n//         return [];\n//       }\n//     });\n//\n//     setOptionList(updateOptionList);\n//   }, [countList, groupList, selecteOptions]);\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <select\n//             value={selecteOptions[index] ? selecteOptions[index].value : ''}\n//             onChange={(event) => handleGroupChange(event, index)}\n//             disabled={index === 0 ? false : !isEnabled[index]}\n//           >\n//             <option value=\"\" disabled={true}>{group.title}</option>\n//             {optionList[index]?.map((option, idx) => (\n//               <option key={idx} value={option.value} disabled={option.isDisabled}>\n//                 {option.label}\n//               </option>\n//             ))}\n//           </select>\n//         </div>\n//       ))}\n//       <h4>선택한 옵션:</h4>\n//       {selecteOptions.map((option, index) => (\n//         <p key={index}>\n//           {groupList[index]?.title}: {option ? option.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport groupListData from './groupListData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selecteOptions, setSelecteOptions] = useState([]);\n  const [isEnabled, setIsEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n  const [optionList, setOptionList] = useState([]);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData.groupList;\n  const countList = groupListData.countList;\n\n  // 함수: 옵션의 라벨 및 사용 가능 여부 생성\n  const getOptionLabel = (option, combination, remainCount) => {\n    const availableOption = remainCount !== 0;\n    const label = availableOption ? `${option} (${remainCount} 개 남음)` : `${option} (품절)`;\n    const isDisabled = !availableOption;\n    return {\n      value: option,\n      label: label,\n      isDisabled: isDisabled\n    };\n  };\n\n  // 함수: 선택 가능한 옵션 리스트 생성\n  const getOptionList = (index, update) => {\n    const nextIndex = index + 1;\n    const updateList = groupList[nextIndex].options.map(option => {\n      var _countList$find;\n      const availableOption = countList.some(item => {\n        let available = true;\n        for (let i = 0; i <= index; i++) {\n          if (update[i]) {\n            if (item.combination[i] !== update[i].value) {\n              available = false;\n              break;\n            }\n          } else {\n            available = false;\n            break;\n          }\n        }\n        return available && item.combination[nextIndex] === option && item.remainCount !== 0;\n      });\n      const countLabel = (_countList$find = countList.find(item => {\n        let match = true;\n        for (let i = 0; i <= index; i++) {\n          if (update[i]) {\n            if (item.combination[i] !== update[i].value) {\n              match = false;\n              break;\n            }\n          } else {\n            match = false;\n            break;\n          }\n        }\n        return match && item.combination[nextIndex] === option;\n      })) === null || _countList$find === void 0 ? void 0 : _countList$find.remainCount;\n      return getOptionLabel(option, countList[index].combination, countLabel);\n    });\n    return updateList;\n  };\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (event, index) => {\n    // 현재 셀렉터에서 선택한 옵션\n    const selectedOption = optionList[index].find(option => option.value === event.target.value);\n\n    // 옵션 배열을 복사하여 업데이트\n    const updateOptions = selecteOptions.slice();\n    updateOptions[index] = selectedOption;\n    setSelecteOptions(updateOptions);\n\n    // 현재 셀렉터 다음의 셀렉터를 enable\n    if (index < groupList.length - 1) {\n      const updatedIsEnabled = isEnabled.slice(); // isEnabled 배열 복사\n      updatedIsEnabled[index + 1] = true;\n      setIsEnabled(updatedIsEnabled);\n    }\n\n    // 다음 셀렉터의 옵션 리스트 업데이트\n    if (index < groupList.length - 1) {\n      const updateOptionList = getOptionList(index, updateOptions);\n\n      // optionList 배열 복사\n      const listArray = optionList.slice();\n      listArray[index + 1] = updateOptionList;\n      setOptionList(listArray);\n    }\n  };\n\n  // 초기화 시 첫 번째 셀렉털를 enable\n  useEffect(() => {\n    setIsEnabled(updateIsEnabled => {\n      return updateIsEnabled.map((value, index) => {\n        return index === 0 ? true : value;\n      });\n    });\n  }, []);\n\n  // 각 셀렉터의 옵션 설정\n  useEffect(() => {\n    const updateOptionList = groupList.map((group, index) => {\n      if (index === 0) {\n        // 첫 번째 셀렉터의 옵션 설정\n        return group.options.map(option => {\n          var _countList$find2;\n          const availableOption = countList.some(item => item.combination[0] === option && item.remainCount !== 0);\n          return getOptionLabel(option, [option], availableOption ? (_countList$find2 = countList.find(item => item.combination[0] === option)) === null || _countList$find2 === void 0 ? void 0 : _countList$find2.remainCount : 0);\n        });\n      } else if (index > 0 && selecteOptions[index - 1]) {\n        // 이전 셀렉터의 선택 옵션과 현재 셀렉터의 옵션 조합에 따라 remainCount를 확인하여 품절 여부를 설정\n        const prevSelecteOption = selecteOptions[index - 1];\n        return group.options.map(option => {\n          var _countList$find3;\n          const availableOption = countList.some(item => item.combination[index - 1] === prevSelecteOption.value && item.combination[index] === option && item.remainCount !== 0);\n          const countLabel = (_countList$find3 = countList.find(item => item.combination[index - 1] === prevSelecteOption.value && item.combination[index] === option)) === null || _countList$find3 === void 0 ? void 0 : _countList$find3.remainCount;\n          return getOptionLabel(option, [prevSelecteOption.value, option], availableOption ? countLabel : 0);\n        });\n      } else {\n        return [];\n      }\n    });\n    setOptionList(updateOptionList);\n  }, [countList, groupList, selecteOptions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [groupList.map((group, index) => {\n      var _optionList$index;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: group.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selecteOptions[index] ? selecteOptions[index].value : '',\n          onChange: event => handleGroupChange(event, index),\n          disabled: index === 0 ? false : !isEnabled[index],\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: group.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), (_optionList$index = optionList[index]) === null || _optionList$index === void 0 ? void 0 : _optionList$index.map((option, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: option.value,\n            disabled: option.isDisabled,\n            children: option.label\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"\\uC120\\uD0DD\\uD55C \\uC635\\uC158:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), selecteOptions.map((option, index) => {\n      var _groupList$index;\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [(_groupList$index = groupList[index]) === null || _groupList$index === void 0 ? void 0 : _groupList$index.title, \": \", option ? option.label : '-']\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 306,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"oiQfkREd6u0wXDqp7JP1DOnYG6M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","groupListData","jsxDEV","_jsxDEV","App","_s","selecteOptions","setSelecteOptions","isEnabled","setIsEnabled","Array","groupList","length","fill","optionList","setOptionList","countList","getOptionLabel","option","combination","remainCount","availableOption","label","isDisabled","value","getOptionList","index","update","nextIndex","updateList","options","map","_countList$find","some","item","available","i","countLabel","find","match","handleGroupChange","event","selectedOption","target","updateOptions","slice","updatedIsEnabled","updateOptionList","listArray","updateIsEnabled","group","_countList$find2","prevSelecteOption","_countList$find3","children","_optionList$index","title","fileName","_jsxFileName","lineNumber","columnNumber","onChange","disabled","idx","_groupList$index","_c","$RefreshReg$"],"sources":["/Users/jiyeong/WebstormProjects/test2/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import groupListData from './groupListData';\n//\n// const App = () => {\n//   const [selecteOptions, setSelecteOptions] = useState([]);\n//   const [isEnabled, setIsEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n//   const [optionList, setOptionList] = useState([]);\n//\n//   // 정적 데이터로서의 품목 그룹 리스트\n//   const groupList = groupListData.groupList;\n//   const countList = groupListData.countList;\n//\n//   // 함수: 선택 가능한 옵션과 라벨 생성\n//   const getOptionList = (index, update) => {\n//     const nextIndex = index + 1;\n//     const updateList = groupList[nextIndex].options.map(option => {\n//       const availableOption = countList.some(item => {\n//         let available = true;\n//         for (let i = 0; i <= index; i++) {\n//           if (update[i]) {\n//             if (item.combination[i] !== update[i].value) {\n//               available = false;\n//               break;\n//             }\n//           } else {\n//             available = false;\n//             break;\n//           }\n//         }\n//         return available && item.combination[nextIndex] === option && item.remainCount !== 0;\n//       });\n//\n//       const countLabel = countList.find(item => {\n//         let match = true;\n//         for (let i = 0; i <= index; i++) {\n//           if (update[i]) {\n//             if (item.combination[i] !== update[i].value) {\n//               match = false;\n//               break;\n//             }\n//           } else {\n//             match = false;\n//             break;\n//           }\n//         }\n//         return match && item.combination[nextIndex] === option;\n//       })?.remainCount;\n//\n//        const label = availableOption ? `${option} (${countLabel} 개 남음)` : `${option} (품절)`;\n//        return {\n//         value: option,\n//         label: label,\n//         isDisabled: !availableOption\n//       };\n//     });\n//\n//     return updateList;\n//   };\n//\n//   // 각 그룹의 옵션을 선택할 때 처리 함수\n//   const handleGroupChange = (event, index) => {\n//     // 현재 셀렉터에서 선택한 옵션\n//     const selectedOption = optionList[index].find(option => option.value === event.target.value);\n//\n//     // 옵션 배열을 복사하여 업데이트\n//     const updateOptions = selecteOptions.slice();\n//     updateOptions[index] = selectedOption;\n//     setSelecteOptions(updateOptions);\n//\n//     // 현재 셀렉터 다음의 셀렉터를 enable\n//     if (index < groupList.length - 1) {\n//       const updatedIsEnabled = isEnabled.slice(); // isEnabled 배열 복사\n//       updatedIsEnabled[index + 1] = true;\n//       setIsEnabled(updatedIsEnabled);\n//     }\n//\n//     // 다음 셀렉터의 옵션 리스트 업데이트\n//     if (index < groupList.length - 1) {\n//       const updateOptionList = getOptionList(index, updateOptions);\n//\n//       // optionList 배열 복사\n//       const listArray = optionList.slice();\n//       listArray[index + 1] = updateOptionList;\n//       setOptionList(listArray);\n//     }\n//   };\n//\n//   // 초기화 시 첫 번째 셀렉털를 enable\n//   useEffect(() => {\n//     setIsEnabled(updateIsEnabled => {\n//       return updateIsEnabled.map((value, index) => {\n//         return index === 0 ? true : value;\n//       });\n//     });\n//   }, []);\n//\n//   // 각 셀렉터의 옵션 설정\n//   useEffect(() => {\n//     const updateOptionList = groupList.map((group, index) => {\n//       if (index === 0) {\n//         // 첫 번째 셀렉터의 옵션 설정\n//         return group.options.map(option => {\n//           const availableOption = countList.some(item => item.combination[0] === option && item.remainCount !== 0);\n//           const label = availableOption ? option : `${option} (품절)`;\n//           return {\n//             value: option,\n//             label: label,\n//             isDisabled: !availableOption\n//           };\n//         });\n//       } else if (index > 0 && selecteOptions[index - 1]) {\n//         // 이전 셀렉터의 선택 옵션과 현재 셀렉터의 옵션 조합에 따라 remainCount를 확인하여 품절 여부를 설정\n//         const prevSelecteOption = selecteOptions[index - 1];\n//         return group.options.map(option => {\n//           const availableOption = countList.some(item =>\n//             item.combination[index - 1] === prevSelecteOption.value &&\n//             item.combination[index] === option &&\n//             item.remainCount !== 0\n//           );\n//           const countLabel = countList.find(item =>\n//             item.combination[index - 1] === prevSelecteOption.value &&\n//             item.combination[index] === option)?.remainCount;\n//           const label = availableOption ? `${option} (${countLabel} 개 남음)` : `${option} (품절)`;\n//           return {\n//             value: option,\n//             label: label,\n//             isDisabled: !availableOption\n//           };\n//         });\n//       } else {\n//         return [];\n//       }\n//     });\n//\n//     setOptionList(updateOptionList);\n//   }, [countList, groupList, selecteOptions]);\n//\n//   return (\n//     <div>\n//       {groupList.map((group, index) => (\n//         <div key={index}>\n//           <h2>{group.title}</h2>\n//           <select\n//             value={selecteOptions[index] ? selecteOptions[index].value : ''}\n//             onChange={(event) => handleGroupChange(event, index)}\n//             disabled={index === 0 ? false : !isEnabled[index]}\n//           >\n//             <option value=\"\" disabled={true}>{group.title}</option>\n//             {optionList[index]?.map((option, idx) => (\n//               <option key={idx} value={option.value} disabled={option.isDisabled}>\n//                 {option.label}\n//               </option>\n//             ))}\n//           </select>\n//         </div>\n//       ))}\n//       <h4>선택한 옵션:</h4>\n//       {selecteOptions.map((option, index) => (\n//         <p key={index}>\n//           {groupList[index]?.title}: {option ? option.label : '-'}\n//         </p>\n//       ))}\n//     </div>\n//   );\n// };\n//\n// export default App;\n\n\nimport React, { useState, useEffect } from 'react';\nimport groupListData from './groupListData';\n\nconst App = () => {\n  const [selecteOptions, setSelecteOptions] = useState([]);\n  const [isEnabled, setIsEnabled] = useState(Array(groupListData.groupList.length).fill(false));\n  const [optionList, setOptionList] = useState([]);\n\n  // 정적 데이터로서의 품목 그룹 리스트\n  const groupList = groupListData.groupList;\n  const countList = groupListData.countList;\n\n  // 함수: 옵션의 라벨 및 사용 가능 여부 생성\n  const getOptionLabel = (option, combination, remainCount) => {\n    const availableOption = remainCount !== 0;\n    const label = availableOption ? `${option} (${remainCount} 개 남음)` : `${option} (품절)`;\n    const isDisabled = !availableOption;\n\n    return {\n      value: option,\n      label: label,\n      isDisabled: isDisabled\n    };\n  };\n\n// 함수: 선택 가능한 옵션 리스트 생성\n  const getOptionList = (index, update) => {\n    const nextIndex = index + 1;\n    const updateList = groupList[nextIndex].options.map(option => {\n      const availableOption = countList.some(item => {\n        let available = true;\n        for (let i = 0; i <= index; i++) {\n          if (update[i]) {\n            if (item.combination[i] !== update[i].value) {\n              available = false;\n              break;\n            }\n          } else {\n            available = false;\n            break;\n          }\n        }\n        return available && item.combination[nextIndex] === option && item.remainCount !== 0;\n      });\n\n      const countLabel = countList.find(item => {\n        let match = true;\n        for (let i = 0; i <= index; i++) {\n          if (update[i]) {\n            if (item.combination[i] !== update[i].value) {\n              match = false;\n              break;\n            }\n          } else {\n            match = false;\n            break;\n          }\n        }\n        return match && item.combination[nextIndex] === option;\n      })?.remainCount;\n\n      return getOptionLabel(option, countList[index].combination, countLabel);\n    });\n\n    return updateList;\n  };\n\n  // 각 그룹의 옵션을 선택할 때 처리 함수\n  const handleGroupChange = (event, index) => {\n    // 현재 셀렉터에서 선택한 옵션\n    const selectedOption = optionList[index].find(option => option.value === event.target.value);\n\n    // 옵션 배열을 복사하여 업데이트\n    const updateOptions = selecteOptions.slice();\n    updateOptions[index] = selectedOption;\n    setSelecteOptions(updateOptions);\n\n    // 현재 셀렉터 다음의 셀렉터를 enable\n    if (index < groupList.length - 1) {\n      const updatedIsEnabled = isEnabled.slice(); // isEnabled 배열 복사\n      updatedIsEnabled[index + 1] = true;\n      setIsEnabled(updatedIsEnabled);\n    }\n\n    // 다음 셀렉터의 옵션 리스트 업데이트\n    if (index < groupList.length - 1) {\n      const updateOptionList = getOptionList(index, updateOptions);\n\n      // optionList 배열 복사\n      const listArray = optionList.slice();\n      listArray[index + 1] = updateOptionList;\n      setOptionList(listArray);\n    }\n  };\n\n  // 초기화 시 첫 번째 셀렉털를 enable\n  useEffect(() => {\n    setIsEnabled(updateIsEnabled => {\n      return updateIsEnabled.map((value, index) => {\n        return index === 0 ? true : value;\n      });\n    });\n  }, []);\n\n  // 각 셀렉터의 옵션 설정\n  useEffect(() => {\n    const updateOptionList = groupList.map((group, index) => {\n      if (index === 0) {\n        // 첫 번째 셀렉터의 옵션 설정\n        return group.options.map(option => {\n          const availableOption = countList.some(item => item.combination[0] === option && item.remainCount !== 0);\n          return getOptionLabel(option, [option], availableOption ? countList.find(item => item.combination[0] === option)?.remainCount : 0);\n        });\n      } else if (index > 0 && selecteOptions[index - 1]) {\n        // 이전 셀렉터의 선택 옵션과 현재 셀렉터의 옵션 조합에 따라 remainCount를 확인하여 품절 여부를 설정\n        const prevSelecteOption = selecteOptions[index - 1];\n        return group.options.map(option => {\n          const availableOption = countList.some(item =>\n            item.combination[index - 1] === prevSelecteOption.value &&\n            item.combination[index] === option &&\n            item.remainCount !== 0\n          );\n          const countLabel = countList.find(item =>\n            item.combination[index - 1] === prevSelecteOption.value &&\n            item.combination[index] === option)?.remainCount;\n          return getOptionLabel(option, [prevSelecteOption.value, option], availableOption ? countLabel : 0);\n        });\n      } else {\n        return [];\n      }\n    });\n\n    setOptionList(updateOptionList);\n  }, [countList, groupList, selecteOptions]);\n\n  return (\n    <div>\n      {groupList.map((group, index) => (\n        <div key={index}>\n          <h2>{group.title}</h2>\n          <select\n            value={selecteOptions[index] ? selecteOptions[index].value : ''}\n            onChange={(event) => handleGroupChange(event, index)}\n            disabled={index === 0 ? false : !isEnabled[index]}\n          >\n            <option value=\"\" disabled={true}>{group.title}</option>\n            {optionList[index]?.map((option, idx) => (\n              <option key={idx} value={option.value} disabled={option.isDisabled}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n      ))}\n      <h4>선택한 옵션:</h4>\n      {selecteOptions.map((option, index) => (\n        <p key={index}>\n          {groupList[index]?.title}: {option ? option.label : '-'}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default App;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}